
Traffic_Light_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080063fc  080063fc  000163fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b4  080064b4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080064b4  080064b4  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064b4  080064b4  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080064bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200000d4  08006590  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08006590  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173a0  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec1  00000000  00000000  0003749d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003a360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  0003b480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019de7  00000000  00000000  0003c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001636a  00000000  00000000  00056267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de37  00000000  00000000  0006c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  000fa45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	080063e4 	.word	0x080063e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	080063e4 	.word	0x080063e4

0800014c <isButtonPressed>:
int KeyReg3[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int TimeOutForKeyPress =  200;
int button_flag[NUM_OF_BUTTON] = {0, 0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000f0 	.word	0x200000f0

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000f0 	.word	0x200000f0

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i=0; i<NUM_OF_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e062      	b.n	8000272 <getKeyInput+0xd2>
	  KeyReg2[i] = KeyReg1[i];
 80001ac:	4a35      	ldr	r2, [pc, #212]	; (8000284 <getKeyInput+0xe4>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4934      	ldr	r1, [pc, #208]	; (8000288 <getKeyInput+0xe8>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg0[i];
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <getKeyInput+0xec>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	492f      	ldr	r1, [pc, #188]	; (8000284 <getKeyInput+0xe4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, buttonList[i]);
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0xf0>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	482e      	ldr	r0, [pc, #184]	; (8000294 <getKeyInput+0xf4>)
 80001da:	f002 f991 	bl	8002500 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <getKeyInput+0xec>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <getKeyInput+0xe4>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4926      	ldr	r1, [pc, #152]	; (800028c <getKeyInput+0xec>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d136      	bne.n	800026c <getKeyInput+0xcc>
 80001fe:	4a21      	ldr	r2, [pc, #132]	; (8000284 <getKeyInput+0xe4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4920      	ldr	r1, [pc, #128]	; (8000288 <getKeyInput+0xe8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d12c      	bne.n	800026c <getKeyInput+0xcc>
		if (KeyReg2[i] != KeyReg3[i]){
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput+0xe8>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <getKeyInput+0xf8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d014      	beq.n	8000250 <getKeyInput+0xb0>
		  KeyReg3[i] = KeyReg2[i];
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <getKeyInput+0xe8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491a      	ldr	r1, [pc, #104]	; (8000298 <getKeyInput+0xf8>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <getKeyInput+0xf8>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d114      	bne.n	800026c <getKeyInput+0xcc>
			TimeOutForKeyPress = 200;
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <getKeyInput+0xfc>)
 8000244:	22c8      	movs	r2, #200	; 0xc8
 8000246:	601a      	str	r2, [r3, #0]
			subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff99 	bl	8000180 <subKeyProcess>
 800024e:	e00d      	b.n	800026c <getKeyInput+0xcc>
		  }
		}else{
		   TimeOutForKeyPress --;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput+0xfc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	3b01      	subs	r3, #1
 8000256:	4a11      	ldr	r2, [pc, #68]	; (800029c <getKeyInput+0xfc>)
 8000258:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0){
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d104      	bne.n	800026c <getKeyInput+0xcc>
			  KeyReg3[i] = NORMAL_STATE;
 8000262:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <getKeyInput+0xf8>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2101      	movs	r1, #1
 8000268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<NUM_OF_BUTTON; i++){
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3301      	adds	r3, #1
 8000270:	607b      	str	r3, [r7, #4]
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2b03      	cmp	r3, #3
 8000276:	dd99      	ble.n	80001ac <getKeyInput+0xc>
			}
		}
	  }
	}
}
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000020 	.word	0x20000020
 8000288:	20000030 	.word	0x20000030
 800028c:	20000010 	.word	0x20000010
 8000290:	20000000 	.word	0x20000000
 8000294:	40010800 	.word	0x40010800
 8000298:	20000040 	.word	0x20000040
 800029c:	20000050 	.word	0x20000050

080002a0 <autoMODE1_task>:
#include "fsm_automatic.h"
#include "global.h"
#include "lcd.h"
int led_buffer[2] = {0, 0};
int init_flag = 0;
void autoMODE1_task() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if (mode == MODE1) {
 80002a4:	4b36      	ldr	r3, [pc, #216]	; (8000380 <autoMODE1_task+0xe0>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d15e      	bne.n	800036a <autoMODE1_task+0xca>
		switch (statusAUTO1) {
 80002ac:	4b35      	ldr	r3, [pc, #212]	; (8000384 <autoMODE1_task+0xe4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d85c      	bhi.n	800036e <autoMODE1_task+0xce>
 80002b4:	a201      	add	r2, pc, #4	; (adr r2, 80002bc <autoMODE1_task+0x1c>)
 80002b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ba:	bf00      	nop
 80002bc:	080002cd 	.word	0x080002cd
 80002c0:	080002d5 	.word	0x080002d5
 80002c4:	08000307 	.word	0x08000307
 80002c8:	08000339 	.word	0x08000339
				case INIT:
					statusAUTO1 = STATE_RED;
 80002cc:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <autoMODE1_task+0xe4>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
					break;
 80002d2:	e053      	b.n	800037c <autoMODE1_task+0xdc>
				case STATE_RED:
					enableRed1();
 80002d4:	f001 faf8 	bl	80018c8 <enableRed1>
					enableRed3();
 80002d8:	f001 fb5c 	bl	8001994 <enableRed3>
					led_buffer[0] = counterRed1;
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <autoMODE1_task+0xe8>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a2a      	ldr	r2, [pc, #168]	; (800038c <autoMODE1_task+0xec>)
 80002e2:	6013      	str	r3, [r2, #0]
					counterRed1--;
 80002e4:	4b28      	ldr	r3, [pc, #160]	; (8000388 <autoMODE1_task+0xe8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	4a27      	ldr	r2, [pc, #156]	; (8000388 <autoMODE1_task+0xe8>)
 80002ec:	6013      	str	r3, [r2, #0]
					if (counterRed1 == INIT) {
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <autoMODE1_task+0xe8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d13d      	bne.n	8000372 <autoMODE1_task+0xd2>
						counterRed1 = AUTO_RED;
 80002f6:	4b26      	ldr	r3, [pc, #152]	; (8000390 <autoMODE1_task+0xf0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a23      	ldr	r2, [pc, #140]	; (8000388 <autoMODE1_task+0xe8>)
 80002fc:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_GREEN;
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <autoMODE1_task+0xe4>)
 8000300:	2202      	movs	r2, #2
 8000302:	601a      	str	r2, [r3, #0]
					}
				    break;
 8000304:	e035      	b.n	8000372 <autoMODE1_task+0xd2>
				case STATE_GREEN:
					enableGreen1();
 8000306:	f001 faff 	bl	8001908 <enableGreen1>
					enableGreen3();
 800030a:	f001 fb67 	bl	80019dc <enableGreen3>
					led_buffer[0] = counterGreen1;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <autoMODE1_task+0xf4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a1e      	ldr	r2, [pc, #120]	; (800038c <autoMODE1_task+0xec>)
 8000314:	6013      	str	r3, [r2, #0]
					counterGreen1--;
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <autoMODE1_task+0xf4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3b01      	subs	r3, #1
 800031c:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <autoMODE1_task+0xf4>)
 800031e:	6013      	str	r3, [r2, #0]
					if (counterGreen1 == INIT) {
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <autoMODE1_task+0xf4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d126      	bne.n	8000376 <autoMODE1_task+0xd6>
						counterGreen1 = AUTO_GREEN;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <autoMODE1_task+0xf8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a19      	ldr	r2, [pc, #100]	; (8000394 <autoMODE1_task+0xf4>)
 800032e:	6013      	str	r3, [r2, #0]
						statusAUTO1 = STATE_YELLOW;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <autoMODE1_task+0xe4>)
 8000332:	2203      	movs	r2, #3
 8000334:	601a      	str	r2, [r3, #0]
					}
					break;
 8000336:	e01e      	b.n	8000376 <autoMODE1_task+0xd6>
				case STATE_YELLOW:
						enableYellow1();
 8000338:	f001 fad6 	bl	80018e8 <enableYellow1>
						enableYellow3();
 800033c:	f001 fb3c 	bl	80019b8 <enableYellow3>
						led_buffer[0] = counterYellow1;
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <autoMODE1_task+0xfc>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a11      	ldr	r2, [pc, #68]	; (800038c <autoMODE1_task+0xec>)
 8000346:	6013      	str	r3, [r2, #0]
						counterYellow1--;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <autoMODE1_task+0xfc>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	3b01      	subs	r3, #1
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <autoMODE1_task+0xfc>)
 8000350:	6013      	str	r3, [r2, #0]
						if (counterYellow1 == INIT) {
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <autoMODE1_task+0xfc>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d10f      	bne.n	800037a <autoMODE1_task+0xda>
							counterYellow1 = AUTO_YELLOW;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <autoMODE1_task+0x100>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a0f      	ldr	r2, [pc, #60]	; (800039c <autoMODE1_task+0xfc>)
 8000360:	6013      	str	r3, [r2, #0]
							statusAUTO1 = STATE_RED;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <autoMODE1_task+0xe4>)
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
						}
					break;
 8000368:	e007      	b.n	800037a <autoMODE1_task+0xda>
				default:
					break;
				}
	}
 800036a:	bf00      	nop
 800036c:	e006      	b.n	800037c <autoMODE1_task+0xdc>
					break;
 800036e:	bf00      	nop
 8000370:	e004      	b.n	800037c <autoMODE1_task+0xdc>
				    break;
 8000372:	bf00      	nop
 8000374:	e002      	b.n	800037c <autoMODE1_task+0xdc>
					break;
 8000376:	bf00      	nop
 8000378:	e000      	b.n	800037c <autoMODE1_task+0xdc>
					break;
 800037a:	bf00      	nop
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000010c 	.word	0x2000010c
 8000384:	20000110 	.word	0x20000110
 8000388:	20000150 	.word	0x20000150
 800038c:	20000100 	.word	0x20000100
 8000390:	20000144 	.word	0x20000144
 8000394:	20000154 	.word	0x20000154
 8000398:	20000148 	.word	0x20000148
 800039c:	20000158 	.word	0x20000158
 80003a0:	2000014c 	.word	0x2000014c

080003a4 <autoMODE2_task>:

void autoMODE2_task() {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	if (mode == MODE1) {
 80003a8:	4b36      	ldr	r3, [pc, #216]	; (8000484 <autoMODE2_task+0xe0>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d15e      	bne.n	800046e <autoMODE2_task+0xca>
		switch (statusAUTO2) {
 80003b0:	4b35      	ldr	r3, [pc, #212]	; (8000488 <autoMODE2_task+0xe4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d85c      	bhi.n	8000472 <autoMODE2_task+0xce>
 80003b8:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <autoMODE2_task+0x1c>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	080003d1 	.word	0x080003d1
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	0800040b 	.word	0x0800040b
 80003cc:	0800043d 	.word	0x0800043d
				case INIT:
					statusAUTO2 = STATE_GREEN;
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <autoMODE2_task+0xe4>)
 80003d2:	2202      	movs	r2, #2
 80003d4:	601a      	str	r2, [r3, #0]
					break;
 80003d6:	e053      	b.n	8000480 <autoMODE2_task+0xdc>
				case STATE_RED:
					enableRed2();
 80003d8:	f001 faa6 	bl	8001928 <enableRed2>
					enableRed4();
 80003dc:	f001 fb10 	bl	8001a00 <enableRed4>
					led_buffer[1] = counterRed2;
 80003e0:	4b2a      	ldr	r3, [pc, #168]	; (800048c <autoMODE2_task+0xe8>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a2a      	ldr	r2, [pc, #168]	; (8000490 <autoMODE2_task+0xec>)
 80003e6:	6053      	str	r3, [r2, #4]
					counterRed2--;
 80003e8:	4b28      	ldr	r3, [pc, #160]	; (800048c <autoMODE2_task+0xe8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a27      	ldr	r2, [pc, #156]	; (800048c <autoMODE2_task+0xe8>)
 80003f0:	6013      	str	r3, [r2, #0]
					if (counterRed2 == INIT) {
 80003f2:	4b26      	ldr	r3, [pc, #152]	; (800048c <autoMODE2_task+0xe8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d13d      	bne.n	8000476 <autoMODE2_task+0xd2>
						counterRed2 = AUTO_RED;
 80003fa:	4b26      	ldr	r3, [pc, #152]	; (8000494 <autoMODE2_task+0xf0>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a23      	ldr	r2, [pc, #140]	; (800048c <autoMODE2_task+0xe8>)
 8000400:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_GREEN;
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <autoMODE2_task+0xe4>)
 8000404:	2202      	movs	r2, #2
 8000406:	601a      	str	r2, [r3, #0]
					}
				    break;
 8000408:	e035      	b.n	8000476 <autoMODE2_task+0xd2>
				case STATE_GREEN:
					enableGreen2();
 800040a:	f001 fab1 	bl	8001970 <enableGreen2>
					enableGreen4();
 800040e:	f001 fb1b 	bl	8001a48 <enableGreen4>
					led_buffer[1] = counterGreen2;
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <autoMODE2_task+0xf4>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a1e      	ldr	r2, [pc, #120]	; (8000490 <autoMODE2_task+0xec>)
 8000418:	6053      	str	r3, [r2, #4]
					counterGreen2--;
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <autoMODE2_task+0xf4>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <autoMODE2_task+0xf4>)
 8000422:	6013      	str	r3, [r2, #0]
					if (counterGreen2 == INIT) {
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <autoMODE2_task+0xf4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d126      	bne.n	800047a <autoMODE2_task+0xd6>
						counterGreen2 = AUTO_GREEN;
 800042c:	4b1b      	ldr	r3, [pc, #108]	; (800049c <autoMODE2_task+0xf8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a19      	ldr	r2, [pc, #100]	; (8000498 <autoMODE2_task+0xf4>)
 8000432:	6013      	str	r3, [r2, #0]
						statusAUTO2 = STATE_YELLOW;
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <autoMODE2_task+0xe4>)
 8000436:	2203      	movs	r2, #3
 8000438:	601a      	str	r2, [r3, #0]
					}
					break;
 800043a:	e01e      	b.n	800047a <autoMODE2_task+0xd6>
				case STATE_YELLOW:
						enableYellow2();
 800043c:	f001 fa86 	bl	800194c <enableYellow2>
						enableYellow4();
 8000440:	f001 faf0 	bl	8001a24 <enableYellow4>
						led_buffer[1] = counterYellow2;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <autoMODE2_task+0xfc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a11      	ldr	r2, [pc, #68]	; (8000490 <autoMODE2_task+0xec>)
 800044a:	6053      	str	r3, [r2, #4]
						counterYellow2--;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <autoMODE2_task+0xfc>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <autoMODE2_task+0xfc>)
 8000454:	6013      	str	r3, [r2, #0]
						if (counterYellow2 == INIT) {
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <autoMODE2_task+0xfc>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10f      	bne.n	800047e <autoMODE2_task+0xda>
							counterYellow2 = AUTO_YELLOW;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <autoMODE2_task+0x100>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a0f      	ldr	r2, [pc, #60]	; (80004a0 <autoMODE2_task+0xfc>)
 8000464:	6013      	str	r3, [r2, #0]
							statusAUTO2 = STATE_RED;
 8000466:	4b08      	ldr	r3, [pc, #32]	; (8000488 <autoMODE2_task+0xe4>)
 8000468:	2201      	movs	r2, #1
 800046a:	601a      	str	r2, [r3, #0]
						}
					break;
 800046c:	e007      	b.n	800047e <autoMODE2_task+0xda>
				default:
					break;
				}
	}
 800046e:	bf00      	nop
 8000470:	e006      	b.n	8000480 <autoMODE2_task+0xdc>
					break;
 8000472:	bf00      	nop
 8000474:	e004      	b.n	8000480 <autoMODE2_task+0xdc>
				    break;
 8000476:	bf00      	nop
 8000478:	e002      	b.n	8000480 <autoMODE2_task+0xdc>
					break;
 800047a:	bf00      	nop
 800047c:	e000      	b.n	8000480 <autoMODE2_task+0xdc>
					break;
 800047e:	bf00      	nop
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	2000010c 	.word	0x2000010c
 8000488:	20000114 	.word	0x20000114
 800048c:	2000015c 	.word	0x2000015c
 8000490:	20000100 	.word	0x20000100
 8000494:	20000144 	.word	0x20000144
 8000498:	20000160 	.word	0x20000160
 800049c:	20000148 	.word	0x20000148
 80004a0:	20000164 	.word	0x20000164
 80004a4:	2000014c 	.word	0x2000014c

080004a8 <autoMODE3_task>:

void autoMODE3_task() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	if (mode == MODE1) {
 80004ac:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <autoMODE3_task+0xbc>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d151      	bne.n	8000558 <autoMODE3_task+0xb0>
		switch (statusAUTO3) {
 80004b4:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <autoMODE3_task+0xc0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d02f      	beq.n	800051c <autoMODE3_task+0x74>
 80004bc:	2b02      	cmp	r3, #2
 80004be:	dc4d      	bgt.n	800055c <autoMODE3_task+0xb4>
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d002      	beq.n	80004ca <autoMODE3_task+0x22>
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d00b      	beq.n	80004e0 <autoMODE3_task+0x38>
			    lcd_send_string("Y ROAD: ");
			    lcd_send_int(led_buffer[1]);
			    statusAUTO3 = HIGH_DIGIT;
			    break;
			default:
				break;
 80004c8:	e048      	b.n	800055c <autoMODE3_task+0xb4>
				statusAUTO3 = HIGH_DIGIT;
 80004ca:	4b27      	ldr	r3, [pc, #156]	; (8000568 <autoMODE3_task+0xc0>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 80004d0:	f000 fcbf 	bl	8000e52 <lcd_clear_display>
				lcd_init();
 80004d4:	f000 fc7a 	bl	8000dcc <lcd_init>
				lcd_send_string("WAITING TIME");
 80004d8:	4824      	ldr	r0, [pc, #144]	; (800056c <autoMODE3_task+0xc4>)
 80004da:	f000 fca5 	bl	8000e28 <lcd_send_string>
				break;
 80004de:	e03e      	b.n	800055e <autoMODE3_task+0xb6>
				lcd_clear_display();
 80004e0:	f000 fcb7 	bl	8000e52 <lcd_clear_display>
			    lcd_goto_XY(1, 0);
 80004e4:	2100      	movs	r1, #0
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fcc1 	bl	8000e6e <lcd_goto_XY>
			    lcd_send_string("X ROAD: ");
 80004ec:	4820      	ldr	r0, [pc, #128]	; (8000570 <autoMODE3_task+0xc8>)
 80004ee:	f000 fc9b 	bl	8000e28 <lcd_send_string>
			    lcd_send_int(led_buffer[0]);
 80004f2:	4b20      	ldr	r3, [pc, #128]	; (8000574 <autoMODE3_task+0xcc>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fcdc 	bl	8000eb4 <lcd_send_int>
			    lcd_goto_XY(2, 0);
 80004fc:	2100      	movs	r1, #0
 80004fe:	2002      	movs	r0, #2
 8000500:	f000 fcb5 	bl	8000e6e <lcd_goto_XY>
			    lcd_send_string("Y ROAD: ");
 8000504:	481c      	ldr	r0, [pc, #112]	; (8000578 <autoMODE3_task+0xd0>)
 8000506:	f000 fc8f 	bl	8000e28 <lcd_send_string>
			    lcd_send_int(led_buffer[1]);
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <autoMODE3_task+0xcc>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fcd0 	bl	8000eb4 <lcd_send_int>
			    statusAUTO3 = LOW_DIGIT;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <autoMODE3_task+0xc0>)
 8000516:	2202      	movs	r2, #2
 8000518:	601a      	str	r2, [r3, #0]
			    break;
 800051a:	e020      	b.n	800055e <autoMODE3_task+0xb6>
				lcd_clear_display();
 800051c:	f000 fc99 	bl	8000e52 <lcd_clear_display>
			    lcd_goto_XY(1, 0);
 8000520:	2100      	movs	r1, #0
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fca3 	bl	8000e6e <lcd_goto_XY>
			    lcd_send_string("X ROAD: ");
 8000528:	4811      	ldr	r0, [pc, #68]	; (8000570 <autoMODE3_task+0xc8>)
 800052a:	f000 fc7d 	bl	8000e28 <lcd_send_string>
			    lcd_send_int(led_buffer[0]);
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <autoMODE3_task+0xcc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fcbe 	bl	8000eb4 <lcd_send_int>
			    lcd_goto_XY(2, 0);
 8000538:	2100      	movs	r1, #0
 800053a:	2002      	movs	r0, #2
 800053c:	f000 fc97 	bl	8000e6e <lcd_goto_XY>
			    lcd_send_string("Y ROAD: ");
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <autoMODE3_task+0xd0>)
 8000542:	f000 fc71 	bl	8000e28 <lcd_send_string>
			    lcd_send_int(led_buffer[1]);
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <autoMODE3_task+0xcc>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fcb2 	bl	8000eb4 <lcd_send_int>
			    statusAUTO3 = HIGH_DIGIT;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <autoMODE3_task+0xc0>)
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
			    break;
 8000556:	e002      	b.n	800055e <autoMODE3_task+0xb6>
		}
	}
 8000558:	bf00      	nop
 800055a:	e000      	b.n	800055e <autoMODE3_task+0xb6>
				break;
 800055c:	bf00      	nop
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000010c 	.word	0x2000010c
 8000568:	20000118 	.word	0x20000118
 800056c:	080063fc 	.word	0x080063fc
 8000570:	0800640c 	.word	0x0800640c
 8000574:	20000100 	.word	0x20000100
 8000578:	08006418 	.word	0x08006418

0800057c <autoMODE4_task>:

void autoMODE4_task() {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
			// CHANGE MODE
			switch (statusAUTO4) {
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <autoMODE4_task+0x7c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b03      	cmp	r3, #3
 8000586:	d021      	beq.n	80005cc <autoMODE4_task+0x50>
 8000588:	2b03      	cmp	r3, #3
 800058a:	dc2d      	bgt.n	80005e8 <autoMODE4_task+0x6c>
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <autoMODE4_task+0x1a>
 8000590:	2b02      	cmp	r3, #2
 8000592:	d00f      	beq.n	80005b4 <autoMODE4_task+0x38>
						lcd_clear_display();
					}
					initVar();
					break;
				default:
					break;
 8000594:	e028      	b.n	80005e8 <autoMODE4_task+0x6c>
					if (isButtonPressed(BUTTON1) == 1) {
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff fdd8 	bl	800014c <isButtonPressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d124      	bne.n	80005ec <autoMODE4_task+0x70>
						mode = MODE2;
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <autoMODE4_task+0x80>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	601a      	str	r2, [r3, #0]
						lcd_clear_display();
 80005a8:	f000 fc53 	bl	8000e52 <lcd_clear_display>
						init_flag = 0; // clear screen
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <autoMODE4_task+0x84>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
					break;
 80005b2:	e01b      	b.n	80005ec <autoMODE4_task+0x70>
					if (isButtonPressed(BUTTON1) == 1) {
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff fdc9 	bl	800014c <isButtonPressed>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d117      	bne.n	80005f0 <autoMODE4_task+0x74>
						mode = MODE3;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <autoMODE4_task+0x80>)
 80005c2:	2203      	movs	r2, #3
 80005c4:	601a      	str	r2, [r3, #0]
						lcd_clear_display();
 80005c6:	f000 fc44 	bl	8000e52 <lcd_clear_display>
					break;
 80005ca:	e011      	b.n	80005f0 <autoMODE4_task+0x74>
					if (isButtonPressed(BUTTON1) == 1) {
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff fdbd 	bl	800014c <isButtonPressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d104      	bne.n	80005e2 <autoMODE4_task+0x66>
						mode = MODE1;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <autoMODE4_task+0x80>)
 80005da:	2201      	movs	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
						lcd_clear_display();
 80005de:	f000 fc38 	bl	8000e52 <lcd_clear_display>
					initVar();
 80005e2:	f000 fb1d 	bl	8000c20 <initVar>
					break;
 80005e6:	e004      	b.n	80005f2 <autoMODE4_task+0x76>
					break;
 80005e8:	bf00      	nop
 80005ea:	e002      	b.n	80005f2 <autoMODE4_task+0x76>
					break;
 80005ec:	bf00      	nop
 80005ee:	e000      	b.n	80005f2 <autoMODE4_task+0x76>
					break;
 80005f0:	bf00      	nop
				}
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000011c 	.word	0x2000011c
 80005fc:	2000010c 	.word	0x2000010c
 8000600:	20000108 	.word	0x20000108

08000604 <manMODE2_1_task>:
#include "fsm_manual.h"
#include "button.h"


// CONFIG RED
void manMODE2_1_task() {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	if (mode == MODE2) {
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <manMODE2_1_task+0x34>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d10f      	bne.n	8000630 <manMODE2_1_task+0x2c>
		// Blinked LED
		switch (statusMODE2_1) {
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <manMODE2_1_task+0x38>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <manMODE2_1_task+0x1a>
 8000618:	2b01      	cmp	r3, #1
 800061a:	d004      	beq.n	8000626 <manMODE2_1_task+0x22>
			case TOGGLE:
				toggleRED1();
				toggleRED2();
				break;
			default:
				break;
 800061c:	e009      	b.n	8000632 <manMODE2_1_task+0x2e>
				statusMODE2_1 = TOGGLE;
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <manMODE2_1_task+0x38>)
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
				break;
 8000624:	e005      	b.n	8000632 <manMODE2_1_task+0x2e>
				toggleRED1();
 8000626:	f001 fa21 	bl	8001a6c <toggleRED1>
				toggleRED2();
 800062a:	f001 fa61 	bl	8001af0 <toggleRED2>
				break;
 800062e:	e000      	b.n	8000632 <manMODE2_1_task+0x2e>
		}
	}
 8000630:	bf00      	nop
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000010c 	.word	0x2000010c
 800063c:	20000120 	.word	0x20000120

08000640 <manMODE2_2_task>:

void manMODE2_2_task() {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	if (mode == MODE2) {
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <manMODE2_2_task+0x74>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d12e      	bne.n	80006aa <manMODE2_2_task+0x6a>
	// DISPLAY CONFIG RED
		switch (statusMODE2_2) {
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <manMODE2_2_task+0x78>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d01a      	beq.n	800068a <manMODE2_2_task+0x4a>
 8000654:	2b02      	cmp	r3, #2
 8000656:	dc2a      	bgt.n	80006ae <manMODE2_2_task+0x6e>
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <manMODE2_2_task+0x22>
 800065c:	2b01      	cmp	r3, #1
 800065e:	d004      	beq.n	800066a <manMODE2_2_task+0x2a>
				lcd_goto_XY(1, 0);
				lcd_send_string("TIME RED: ");
				lcd_send_int(AUTO_RED);
				break;
			default:
				break;
 8000660:	e025      	b.n	80006ae <manMODE2_2_task+0x6e>
				statusMODE2_2 = HIGH_DIGIT;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <manMODE2_2_task+0x78>)
 8000664:	2201      	movs	r2, #1
 8000666:	601a      	str	r2, [r3, #0]
				break;
 8000668:	e022      	b.n	80006b0 <manMODE2_2_task+0x70>
				statusMODE2_2 = LOW_DIGIT;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <manMODE2_2_task+0x78>)
 800066c:	2202      	movs	r2, #2
 800066e:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 8000670:	2100      	movs	r1, #0
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fbfb 	bl	8000e6e <lcd_goto_XY>
				lcd_send_string("TIME RED: ");
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <manMODE2_2_task+0x7c>)
 800067a:	f000 fbd5 	bl	8000e28 <lcd_send_string>
				lcd_send_int(AUTO_RED);
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <manMODE2_2_task+0x80>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fc16 	bl	8000eb4 <lcd_send_int>
				break;
 8000688:	e012      	b.n	80006b0 <manMODE2_2_task+0x70>
				statusMODE2_2 = LOW_DIGIT;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <manMODE2_2_task+0x78>)
 800068c:	2202      	movs	r2, #2
 800068e:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 8000690:	2100      	movs	r1, #0
 8000692:	2001      	movs	r0, #1
 8000694:	f000 fbeb 	bl	8000e6e <lcd_goto_XY>
				lcd_send_string("TIME RED: ");
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <manMODE2_2_task+0x7c>)
 800069a:	f000 fbc5 	bl	8000e28 <lcd_send_string>
				lcd_send_int(AUTO_RED);
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <manMODE2_2_task+0x80>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fc06 	bl	8000eb4 <lcd_send_int>
				break;
 80006a8:	e002      	b.n	80006b0 <manMODE2_2_task+0x70>
		}
	}
 80006aa:	bf00      	nop
 80006ac:	e000      	b.n	80006b0 <manMODE2_2_task+0x70>
				break;
 80006ae:	bf00      	nop
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000010c 	.word	0x2000010c
 80006b8:	20000124 	.word	0x20000124
 80006bc:	08006424 	.word	0x08006424
 80006c0:	20000144 	.word	0x20000144

080006c4 <manMODE2_3_task>:

void manMODE2_3_task() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	if (mode == MODE2) {
 80006c8:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <manMODE2_3_task+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d179      	bne.n	80007c4 <manMODE2_3_task+0x100>
			// Change time for mode
			switch (statusMODE2_3) {
 80006d0:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <manMODE2_3_task+0x108>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d865      	bhi.n	80007a4 <manMODE2_3_task+0xe0>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <manMODE2_3_task+0x1c>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	080006f5 	.word	0x080006f5
 80006e4:	080007a5 	.word	0x080007a5
 80006e8:	08000713 	.word	0x08000713
 80006ec:	0800074b 	.word	0x0800074b
 80006f0:	08000783 	.word	0x08000783
			case INIT:
				if (isButtonPressed(BUTTON3) == 1) {
 80006f4:	2002      	movs	r0, #2
 80006f6:	f7ff fd29 	bl	800014c <isButtonPressed>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d153      	bne.n	80007a8 <manMODE2_3_task+0xe4>
					statusMODE2_3 = INCREASE;
 8000700:	4b32      	ldr	r3, [pc, #200]	; (80007cc <manMODE2_3_task+0x108>)
 8000702:	2202      	movs	r2, #2
 8000704:	601a      	str	r2, [r3, #0]
					AUTO_RED++;
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <manMODE2_3_task+0x10c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <manMODE2_3_task+0x10c>)
 800070e:	6013      	str	r3, [r2, #0]
				}
				break;
 8000710:	e04a      	b.n	80007a8 <manMODE2_3_task+0xe4>
			case INCREASE:
				if (isButtonPressed(BUTTON3) == 1) {
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff fd1a 	bl	800014c <isButtonPressed>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10b      	bne.n	8000736 <manMODE2_3_task+0x72>
					AUTO_RED += 1;
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <manMODE2_3_task+0x10c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <manMODE2_3_task+0x10c>)
 8000726:	6013      	str	r3, [r2, #0]
					if (AUTO_RED > UPPER_BOUND)
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <manMODE2_3_task+0x10c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b63      	cmp	r3, #99	; 0x63
 800072e:	dd02      	ble.n	8000736 <manMODE2_3_task+0x72>
						AUTO_RED = UPPER_BOUND;
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <manMODE2_3_task+0x10c>)
 8000732:	2263      	movs	r2, #99	; 0x63
 8000734:	601a      	str	r2, [r3, #0]
				}
				if (isButtonPressed(BUTTON2) == 1) {
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff fd08 	bl	800014c <isButtonPressed>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d134      	bne.n	80007ac <manMODE2_3_task+0xe8>
					statusMODE2_3 = SAVE;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <manMODE2_3_task+0x108>)
 8000744:	2204      	movs	r2, #4
 8000746:	601a      	str	r2, [r3, #0]
				}
				break;
 8000748:	e030      	b.n	80007ac <manMODE2_3_task+0xe8>
			case DECREASE:
				if (isButtonPressed(BUTTON4) == 1) {
 800074a:	2003      	movs	r0, #3
 800074c:	f7ff fcfe 	bl	800014c <isButtonPressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d10b      	bne.n	800076e <manMODE2_3_task+0xaa>
					AUTO_RED -= 1;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <manMODE2_3_task+0x10c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <manMODE2_3_task+0x10c>)
 800075e:	6013      	str	r3, [r2, #0]
					if (AUTO_RED < LOWER_BOUND) {
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <manMODE2_3_task+0x10c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	dc02      	bgt.n	800076e <manMODE2_3_task+0xaa>
						AUTO_RED = LOWER_BOUND;
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <manMODE2_3_task+0x10c>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
					}
				}
				if (isButtonPressed(BUTTON2) == 1) {
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fcec 	bl	800014c <isButtonPressed>
 8000774:	4603      	mov	r3, r0
 8000776:	2b01      	cmp	r3, #1
 8000778:	d11a      	bne.n	80007b0 <manMODE2_3_task+0xec>
					statusMODE2_3 = SAVE;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <manMODE2_3_task+0x108>)
 800077c:	2204      	movs	r2, #4
 800077e:	601a      	str	r2, [r3, #0]
				}
				break;
 8000780:	e016      	b.n	80007b0 <manMODE2_3_task+0xec>
			case SAVE:
				if (AUTO_RED != (AUTO_GREEN + AUTO_YELLOW)) {
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <manMODE2_3_task+0x110>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <manMODE2_3_task+0x114>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	441a      	add	r2, r3
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <manMODE2_3_task+0x10c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d001      	beq.n	8000798 <manMODE2_3_task+0xd4>
					time_traffic_base();
 8000794:	f000 fa26 	bl	8000be4 <time_traffic_base>
				}
				mode = MODE1;
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <manMODE2_3_task+0x104>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
				initVar();
 800079e:	f000 fa3f 	bl	8000c20 <initVar>
				break;
 80007a2:	e006      	b.n	80007b2 <manMODE2_3_task+0xee>
			default:
				break;
 80007a4:	bf00      	nop
 80007a6:	e004      	b.n	80007b2 <manMODE2_3_task+0xee>
				break;
 80007a8:	bf00      	nop
 80007aa:	e002      	b.n	80007b2 <manMODE2_3_task+0xee>
				break;
 80007ac:	bf00      	nop
 80007ae:	e000      	b.n	80007b2 <manMODE2_3_task+0xee>
				break;
 80007b0:	bf00      	nop
			}

			// Continue to MODE3
			if (isButtonPressed(BUTTON1) == 1) {
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff fcca 	bl	800014c <isButtonPressed>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d102      	bne.n	80007c4 <manMODE2_3_task+0x100>
				mode = MODE3;
 80007be:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <manMODE2_3_task+0x104>)
 80007c0:	2203      	movs	r2, #3
 80007c2:	601a      	str	r2, [r3, #0]
			}
	}
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000010c 	.word	0x2000010c
 80007cc:	20000128 	.word	0x20000128
 80007d0:	20000144 	.word	0x20000144
 80007d4:	20000148 	.word	0x20000148
 80007d8:	2000014c 	.word	0x2000014c

080007dc <manMODE3_1_task>:

// CONFIG GREEN
void manMODE3_1_task() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	if (mode == MODE3) {
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <manMODE3_1_task+0x34>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d10f      	bne.n	8000808 <manMODE3_1_task+0x2c>
		// Blinked LED
		switch (statusMODE3_1) {
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <manMODE3_1_task+0x38>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <manMODE3_1_task+0x1a>
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d004      	beq.n	80007fe <manMODE3_1_task+0x22>
			case TOGGLE:
				toggleGREEN1();
				toggleGREEN2();
				break;
			default:
				break;
 80007f4:	e009      	b.n	800080a <manMODE3_1_task+0x2e>
				statusMODE3_1 = TOGGLE;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <manMODE3_1_task+0x38>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
				break;
 80007fc:	e005      	b.n	800080a <manMODE3_1_task+0x2e>
				toggleGREEN1();
 80007fe:	f001 f9b7 	bl	8001b70 <toggleGREEN1>
				toggleGREEN2();
 8000802:	f001 f9f7 	bl	8001bf4 <toggleGREEN2>
				break;
 8000806:	e000      	b.n	800080a <manMODE3_1_task+0x2e>
		}
	}
 8000808:	bf00      	nop
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000010c 	.word	0x2000010c
 8000814:	2000012c 	.word	0x2000012c

08000818 <manMODE3_2_task>:

void manMODE3_2_task() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	if (mode == MODE3) {
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <manMODE3_2_task+0x74>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d12e      	bne.n	8000882 <manMODE3_2_task+0x6a>
	// DISPLAY CONFIG GREEN
		switch (statusMODE3_2) {
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <manMODE3_2_task+0x78>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d01a      	beq.n	8000862 <manMODE3_2_task+0x4a>
 800082c:	2b02      	cmp	r3, #2
 800082e:	dc2a      	bgt.n	8000886 <manMODE3_2_task+0x6e>
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <manMODE3_2_task+0x22>
 8000834:	2b01      	cmp	r3, #1
 8000836:	d004      	beq.n	8000842 <manMODE3_2_task+0x2a>
				lcd_goto_XY(1, 0);
				lcd_send_string("TIME GREEN: ");
				lcd_send_int(AUTO_GREEN);
				break;
			default:
				break;
 8000838:	e025      	b.n	8000886 <manMODE3_2_task+0x6e>
				statusMODE3_2 = HIGH_DIGIT;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <manMODE3_2_task+0x78>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
				break;
 8000840:	e022      	b.n	8000888 <manMODE3_2_task+0x70>
				statusMODE3_2 = LOW_DIGIT;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <manMODE3_2_task+0x78>)
 8000844:	2202      	movs	r2, #2
 8000846:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 8000848:	2100      	movs	r1, #0
 800084a:	2001      	movs	r0, #1
 800084c:	f000 fb0f 	bl	8000e6e <lcd_goto_XY>
				lcd_send_string("TIME GREEN: ");
 8000850:	4810      	ldr	r0, [pc, #64]	; (8000894 <manMODE3_2_task+0x7c>)
 8000852:	f000 fae9 	bl	8000e28 <lcd_send_string>
				lcd_send_int(AUTO_GREEN);
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <manMODE3_2_task+0x80>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fb2a 	bl	8000eb4 <lcd_send_int>
				break;
 8000860:	e012      	b.n	8000888 <manMODE3_2_task+0x70>
				statusMODE3_2 = LOW_DIGIT;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <manMODE3_2_task+0x78>)
 8000864:	2202      	movs	r2, #2
 8000866:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 8000868:	2100      	movs	r1, #0
 800086a:	2001      	movs	r0, #1
 800086c:	f000 faff 	bl	8000e6e <lcd_goto_XY>
				lcd_send_string("TIME GREEN: ");
 8000870:	4808      	ldr	r0, [pc, #32]	; (8000894 <manMODE3_2_task+0x7c>)
 8000872:	f000 fad9 	bl	8000e28 <lcd_send_string>
				lcd_send_int(AUTO_GREEN);
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <manMODE3_2_task+0x80>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fb1a 	bl	8000eb4 <lcd_send_int>
				break;
 8000880:	e002      	b.n	8000888 <manMODE3_2_task+0x70>
		}
	}
 8000882:	bf00      	nop
 8000884:	e000      	b.n	8000888 <manMODE3_2_task+0x70>
				break;
 8000886:	bf00      	nop
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000010c 	.word	0x2000010c
 8000890:	20000130 	.word	0x20000130
 8000894:	08006430 	.word	0x08006430
 8000898:	20000148 	.word	0x20000148

0800089c <manMODE3_3_task>:

void manMODE3_3_task() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	if (mode == MODE3) {
 80008a0:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <manMODE3_3_task+0x104>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d179      	bne.n	800099c <manMODE3_3_task+0x100>
			// Change time for mode
			switch (statusMODE3_3) {
 80008a8:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <manMODE3_3_task+0x108>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d865      	bhi.n	800097c <manMODE3_3_task+0xe0>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <manMODE3_3_task+0x1c>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008cd 	.word	0x080008cd
 80008bc:	0800097d 	.word	0x0800097d
 80008c0:	080008eb 	.word	0x080008eb
 80008c4:	08000923 	.word	0x08000923
 80008c8:	0800095b 	.word	0x0800095b
			case INIT:
				if (isButtonPressed(BUTTON3) == 1) {
 80008cc:	2002      	movs	r0, #2
 80008ce:	f7ff fc3d 	bl	800014c <isButtonPressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d153      	bne.n	8000980 <manMODE3_3_task+0xe4>
					statusMODE3_3 = INCREASE;
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <manMODE3_3_task+0x108>)
 80008da:	2202      	movs	r2, #2
 80008dc:	601a      	str	r2, [r3, #0]
					AUTO_GREEN++;
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <manMODE3_3_task+0x10c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <manMODE3_3_task+0x10c>)
 80008e6:	6013      	str	r3, [r2, #0]
				}
				break;
 80008e8:	e04a      	b.n	8000980 <manMODE3_3_task+0xe4>
			case INCREASE:
				if (isButtonPressed(BUTTON3) == 1) {
 80008ea:	2002      	movs	r0, #2
 80008ec:	f7ff fc2e 	bl	800014c <isButtonPressed>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d10b      	bne.n	800090e <manMODE3_3_task+0x72>
					AUTO_GREEN += 1;
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <manMODE3_3_task+0x10c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4a2a      	ldr	r2, [pc, #168]	; (80009a8 <manMODE3_3_task+0x10c>)
 80008fe:	6013      	str	r3, [r2, #0]
					if (AUTO_GREEN > UPPER_BOUND)
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <manMODE3_3_task+0x10c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b63      	cmp	r3, #99	; 0x63
 8000906:	dd02      	ble.n	800090e <manMODE3_3_task+0x72>
						AUTO_GREEN = UPPER_BOUND;
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <manMODE3_3_task+0x10c>)
 800090a:	2263      	movs	r2, #99	; 0x63
 800090c:	601a      	str	r2, [r3, #0]
				}
				if (isButtonPressed(BUTTON3) == 1) {
 800090e:	2002      	movs	r0, #2
 8000910:	f7ff fc1c 	bl	800014c <isButtonPressed>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d134      	bne.n	8000984 <manMODE3_3_task+0xe8>
					statusMODE3_3 = SAVE;
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <manMODE3_3_task+0x108>)
 800091c:	2204      	movs	r2, #4
 800091e:	601a      	str	r2, [r3, #0]
				}
				break;
 8000920:	e030      	b.n	8000984 <manMODE3_3_task+0xe8>
			case DECREASE:
				if (isButtonPressed(BUTTON4) == 1) {
 8000922:	2003      	movs	r0, #3
 8000924:	f7ff fc12 	bl	800014c <isButtonPressed>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d10b      	bne.n	8000946 <manMODE3_3_task+0xaa>
					AUTO_GREEN -= 1;
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <manMODE3_3_task+0x10c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <manMODE3_3_task+0x10c>)
 8000936:	6013      	str	r3, [r2, #0]
					if (AUTO_GREEN < LOWER_BOUND) {
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <manMODE3_3_task+0x10c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	dc02      	bgt.n	8000946 <manMODE3_3_task+0xaa>
						AUTO_GREEN = LOWER_BOUND;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <manMODE3_3_task+0x10c>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
					}
				}
				if (isButtonPressed(BUTTON2) == 1) {
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fc00 	bl	800014c <isButtonPressed>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d11a      	bne.n	8000988 <manMODE3_3_task+0xec>
					statusMODE2_3 = SAVE;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <manMODE3_3_task+0x110>)
 8000954:	2204      	movs	r2, #4
 8000956:	601a      	str	r2, [r3, #0]
				}
				break;
 8000958:	e016      	b.n	8000988 <manMODE3_3_task+0xec>

			case SAVE:
				if (AUTO_RED != (AUTO_GREEN + AUTO_YELLOW)) {
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <manMODE3_3_task+0x10c>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <manMODE3_3_task+0x114>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	441a      	add	r2, r3
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <manMODE3_3_task+0x118>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	d001      	beq.n	8000970 <manMODE3_3_task+0xd4>
					time_traffic_base();
 800096c:	f000 f93a 	bl	8000be4 <time_traffic_base>
				}
				mode = MODE1;
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <manMODE3_3_task+0x104>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
				initVar();
 8000976:	f000 f953 	bl	8000c20 <initVar>
				break;
 800097a:	e006      	b.n	800098a <manMODE3_3_task+0xee>
			default:
				break;
 800097c:	bf00      	nop
 800097e:	e004      	b.n	800098a <manMODE3_3_task+0xee>
				break;
 8000980:	bf00      	nop
 8000982:	e002      	b.n	800098a <manMODE3_3_task+0xee>
				break;
 8000984:	bf00      	nop
 8000986:	e000      	b.n	800098a <manMODE3_3_task+0xee>
				break;
 8000988:	bf00      	nop
			}

			// Continue to MODE3
			if (isButtonPressed(BUTTON1) == 1) {
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fbde 	bl	800014c <isButtonPressed>
 8000990:	4603      	mov	r3, r0
 8000992:	2b01      	cmp	r3, #1
 8000994:	d102      	bne.n	800099c <manMODE3_3_task+0x100>
				mode = MODE4;
 8000996:	4b02      	ldr	r3, [pc, #8]	; (80009a0 <manMODE3_3_task+0x104>)
 8000998:	2204      	movs	r2, #4
 800099a:	601a      	str	r2, [r3, #0]
			}
	}
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000010c 	.word	0x2000010c
 80009a4:	20000134 	.word	0x20000134
 80009a8:	20000148 	.word	0x20000148
 80009ac:	20000128 	.word	0x20000128
 80009b0:	2000014c 	.word	0x2000014c
 80009b4:	20000144 	.word	0x20000144

080009b8 <manMODE4_1_task>:

// CONFIG YELLOW
void manMODE4_1_task() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if (mode == MODE4) {
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <manMODE4_1_task+0x34>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d10f      	bne.n	80009e4 <manMODE4_1_task+0x2c>
		// Blinked LED
		switch (statusMODE4_1) {
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <manMODE4_1_task+0x38>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <manMODE4_1_task+0x1a>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d004      	beq.n	80009da <manMODE4_1_task+0x22>
			case TOGGLE:
				toggleYELLOW1();
				toggleYELLOW2();
				break;
			default:
				break;
 80009d0:	e009      	b.n	80009e6 <manMODE4_1_task+0x2e>
				statusMODE4_1 = TOGGLE;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <manMODE4_1_task+0x38>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
				break;
 80009d8:	e005      	b.n	80009e6 <manMODE4_1_task+0x2e>
				toggleYELLOW1();
 80009da:	f001 f94b 	bl	8001c74 <toggleYELLOW1>
				toggleYELLOW2();
 80009de:	f001 f98b 	bl	8001cf8 <toggleYELLOW2>
				break;
 80009e2:	e000      	b.n	80009e6 <manMODE4_1_task+0x2e>
		}
	}
 80009e4:	bf00      	nop
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000010c 	.word	0x2000010c
 80009f0:	20000138 	.word	0x20000138

080009f4 <manMODE4_2_task>:

void manMODE4_2_task() {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	if (mode == MODE4) {
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <manMODE4_2_task+0x74>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d12e      	bne.n	8000a5e <manMODE4_2_task+0x6a>
	// DISPLAY CONFIG RED
		switch (statusMODE4_2) {
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <manMODE4_2_task+0x78>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d01a      	beq.n	8000a3e <manMODE4_2_task+0x4a>
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	dc2a      	bgt.n	8000a62 <manMODE4_2_task+0x6e>
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <manMODE4_2_task+0x22>
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d004      	beq.n	8000a1e <manMODE4_2_task+0x2a>
				lcd_goto_XY(1, 0);
				lcd_send_string("TIME YELLOW: ");
				lcd_send_int(AUTO_YELLOW);
				break;
			default:
				break;
 8000a14:	e025      	b.n	8000a62 <manMODE4_2_task+0x6e>
				statusMODE4_2 = HIGH_DIGIT;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <manMODE4_2_task+0x78>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
				break;
 8000a1c:	e022      	b.n	8000a64 <manMODE4_2_task+0x70>
				statusMODE4_2 = LOW_DIGIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <manMODE4_2_task+0x78>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 8000a24:	2100      	movs	r1, #0
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fa21 	bl	8000e6e <lcd_goto_XY>
				lcd_send_string("TIME YELLOW: ");
 8000a2c:	4810      	ldr	r0, [pc, #64]	; (8000a70 <manMODE4_2_task+0x7c>)
 8000a2e:	f000 f9fb 	bl	8000e28 <lcd_send_string>
				lcd_send_int(AUTO_YELLOW);
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <manMODE4_2_task+0x80>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fa3c 	bl	8000eb4 <lcd_send_int>
				break;
 8000a3c:	e012      	b.n	8000a64 <manMODE4_2_task+0x70>
				statusMODE4_2 = LOW_DIGIT;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <manMODE4_2_task+0x78>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	601a      	str	r2, [r3, #0]
				lcd_goto_XY(1, 0);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2001      	movs	r0, #1
 8000a48:	f000 fa11 	bl	8000e6e <lcd_goto_XY>
				lcd_send_string("TIME YELLOW: ");
 8000a4c:	4808      	ldr	r0, [pc, #32]	; (8000a70 <manMODE4_2_task+0x7c>)
 8000a4e:	f000 f9eb 	bl	8000e28 <lcd_send_string>
				lcd_send_int(AUTO_YELLOW);
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <manMODE4_2_task+0x80>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fa2c 	bl	8000eb4 <lcd_send_int>
				break;
 8000a5c:	e002      	b.n	8000a64 <manMODE4_2_task+0x70>
		}
	}
 8000a5e:	bf00      	nop
 8000a60:	e000      	b.n	8000a64 <manMODE4_2_task+0x70>
				break;
 8000a62:	bf00      	nop
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000010c 	.word	0x2000010c
 8000a6c:	2000013c 	.word	0x2000013c
 8000a70:	08006440 	.word	0x08006440
 8000a74:	2000014c 	.word	0x2000014c

08000a78 <manMODE4_3_task>:

void manMODE4_3_task() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if (mode == MODE4) {
 8000a7c:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <manMODE4_3_task+0x120>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	f040 8086 	bne.w	8000b92 <manMODE4_3_task+0x11a>
			// Change time for mode
			switch (statusMODE4_3) {
 8000a86:	4b45      	ldr	r3, [pc, #276]	; (8000b9c <manMODE4_3_task+0x124>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	d864      	bhi.n	8000b58 <manMODE4_3_task+0xe0>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <manMODE4_3_task+0x1c>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000aa9 	.word	0x08000aa9
 8000a98:	08000b59 	.word	0x08000b59
 8000a9c:	08000ac7 	.word	0x08000ac7
 8000aa0:	08000aff 	.word	0x08000aff
 8000aa4:	08000b37 	.word	0x08000b37
			case INIT:
				if (isButtonPressed(BUTTON3) == 1) {
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f7ff fb4f 	bl	800014c <isButtonPressed>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d153      	bne.n	8000b5c <manMODE4_3_task+0xe4>
					statusMODE4_3 = INCREASE;
 8000ab4:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <manMODE4_3_task+0x124>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	601a      	str	r2, [r3, #0]
					AUTO_YELLOW++;
 8000aba:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a37      	ldr	r2, [pc, #220]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000ac2:	6013      	str	r3, [r2, #0]
				}
				break;
 8000ac4:	e04a      	b.n	8000b5c <manMODE4_3_task+0xe4>
			case INCREASE:
				if (isButtonPressed(BUTTON3) == 1) {
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f7ff fb40 	bl	800014c <isButtonPressed>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d10b      	bne.n	8000aea <manMODE4_3_task+0x72>
					AUTO_YELLOW += 1;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000ada:	6013      	str	r3, [r2, #0]
					if (AUTO_YELLOW > UPPER_BOUND)
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b63      	cmp	r3, #99	; 0x63
 8000ae2:	dd02      	ble.n	8000aea <manMODE4_3_task+0x72>
						AUTO_YELLOW = UPPER_BOUND;
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000ae6:	2263      	movs	r2, #99	; 0x63
 8000ae8:	601a      	str	r2, [r3, #0]
				}
				if (isButtonPressed(BUTTON2) == 1) {
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff fb2e 	bl	800014c <isButtonPressed>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d134      	bne.n	8000b60 <manMODE4_3_task+0xe8>
					statusMODE4_3 = SAVE;
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <manMODE4_3_task+0x124>)
 8000af8:	2204      	movs	r2, #4
 8000afa:	601a      	str	r2, [r3, #0]
				}
				break;
 8000afc:	e030      	b.n	8000b60 <manMODE4_3_task+0xe8>
			case DECREASE:
				if (isButtonPressed(BUTTON4) == 1) {
 8000afe:	2003      	movs	r0, #3
 8000b00:	f7ff fb24 	bl	800014c <isButtonPressed>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <manMODE4_3_task+0xaa>
					AUTO_YELLOW -= 1;
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000b12:	6013      	str	r3, [r2, #0]
					if (AUTO_YELLOW < LOWER_BOUND) {
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dc02      	bgt.n	8000b22 <manMODE4_3_task+0xaa>
						AUTO_YELLOW = LOWER_BOUND;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
					}
				}
				if (isButtonPressed(BUTTON2) == 1) {
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fb12 	bl	800014c <isButtonPressed>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d11a      	bne.n	8000b64 <manMODE4_3_task+0xec>
					statusMODE2_3 = SAVE;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <manMODE4_3_task+0x12c>)
 8000b30:	2204      	movs	r2, #4
 8000b32:	601a      	str	r2, [r3, #0]
				}
				break;
 8000b34:	e016      	b.n	8000b64 <manMODE4_3_task+0xec>
			case SAVE:
				if (AUTO_RED != (AUTO_GREEN + AUTO_YELLOW)) {
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <manMODE4_3_task+0x130>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	441a      	add	r2, r3
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <manMODE4_3_task+0x134>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d001      	beq.n	8000b4c <manMODE4_3_task+0xd4>
					time_traffic_base();
 8000b48:	f000 f84c 	bl	8000be4 <time_traffic_base>
				}
				mode = MODE1;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <manMODE4_3_task+0x120>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
				initVar();
 8000b52:	f000 f865 	bl	8000c20 <initVar>
				break;
 8000b56:	e006      	b.n	8000b66 <manMODE4_3_task+0xee>
			default:
				break;
 8000b58:	bf00      	nop
 8000b5a:	e004      	b.n	8000b66 <manMODE4_3_task+0xee>
				break;
 8000b5c:	bf00      	nop
 8000b5e:	e002      	b.n	8000b66 <manMODE4_3_task+0xee>
				break;
 8000b60:	bf00      	nop
 8000b62:	e000      	b.n	8000b66 <manMODE4_3_task+0xee>
				break;
 8000b64:	bf00      	nop
			}

			// Continue to MODE
			if (isButtonPressed(BUTTON1) == 1) {
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff faf0 	bl	800014c <isButtonPressed>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10f      	bne.n	8000b92 <manMODE4_3_task+0x11a>
				mode = MODE1;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <manMODE4_3_task+0x120>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 8000b78:	f000 f96b 	bl	8000e52 <lcd_clear_display>
				if (AUTO_RED != (AUTO_GREEN + AUTO_YELLOW)) {
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <manMODE4_3_task+0x130>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <manMODE4_3_task+0x128>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	441a      	add	r2, r3
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <manMODE4_3_task+0x134>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d001      	beq.n	8000b92 <manMODE4_3_task+0x11a>
					time_traffic_base();
 8000b8e:	f000 f829 	bl	8000be4 <time_traffic_base>
				}
			}
	}
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000010c 	.word	0x2000010c
 8000b9c:	20000140 	.word	0x20000140
 8000ba0:	2000014c 	.word	0x2000014c
 8000ba4:	20000128 	.word	0x20000128
 8000ba8:	20000148 	.word	0x20000148
 8000bac:	20000144 	.word	0x20000144

08000bb0 <initWaitingTime>:
int counterYellow2 = 0;

/*------------------------------- Function Implementations -------------------------------*/


void initWaitingTime(void) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	AUTO_GREEN = 5;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <initWaitingTime+0x28>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	601a      	str	r2, [r3, #0]
	AUTO_YELLOW = 2;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <initWaitingTime+0x2c>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	601a      	str	r2, [r3, #0]
	AUTO_RED = AUTO_GREEN + AUTO_YELLOW;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <initWaitingTime+0x28>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <initWaitingTime+0x2c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <initWaitingTime+0x30>)
 8000bcc:	6013      	str	r3, [r2, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000148 	.word	0x20000148
 8000bdc:	2000014c 	.word	0x2000014c
 8000be0:	20000144 	.word	0x20000144

08000be4 <time_traffic_base>:

void time_traffic_base(void) {
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	AUTO_RED = TIME_RED;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <time_traffic_base+0x24>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <time_traffic_base+0x28>)
 8000bee:	6013      	str	r3, [r2, #0]
	AUTO_GREEN = TIME_GREEN;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <time_traffic_base+0x2c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <time_traffic_base+0x30>)
 8000bf6:	6013      	str	r3, [r2, #0]
	AUTO_YELLOW = TIME_YELLOW;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <time_traffic_base+0x34>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <time_traffic_base+0x38>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	2000005c 	.word	0x2000005c
 8000c0c:	20000144 	.word	0x20000144
 8000c10:	20000054 	.word	0x20000054
 8000c14:	20000148 	.word	0x20000148
 8000c18:	20000058 	.word	0x20000058
 8000c1c:	2000014c 	.word	0x2000014c

08000c20 <initVar>:

void initVar(void) {
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	mode = MODE1;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <initVar+0x90>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

	// Initialize status variables for Automatic Mode (MODE 1)
	statusAUTO1 = INIT;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <initVar+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
	statusAUTO2 = INIT;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <initVar+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
	statusAUTO3 = INIT;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <initVar+0x9c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
	statusAUTO4 = INIT;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <initVar+0xa0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]

	// Initialize status variables for Manual Mode (MODE 2)
	statusMODE2_1 = INIT;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <initVar+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
	statusMODE2_2 = INIT;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <initVar+0xa8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
	statusMODE2_3 = INIT;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <initVar+0xac>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]

	// Initialize status variables for Manual Mode (MODE 3)
	statusMODE3_1 = INIT;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <initVar+0xb0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
	statusMODE3_2 = INIT;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <initVar+0xb4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
	statusMODE3_3 = INIT;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <initVar+0xb8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]

	// Initialize status variables for Manual Mode (MODE 4)
	statusMODE4_1 = INIT;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <initVar+0xbc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
	statusMODE4_2 = INIT;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <initVar+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
	statusMODE4_3 = INIT;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <initVar+0xc4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]

	// Initialize counters for each traffic light side
	counterRed1 = AUTO_RED;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <initVar+0xc8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <initVar+0xcc>)
 8000c7e:	6013      	str	r3, [r2, #0]
	counterGreen1 = AUTO_GREEN;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <initVar+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <initVar+0xd4>)
 8000c86:	6013      	str	r3, [r2, #0]
	counterYellow1 = AUTO_YELLOW;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <initVar+0xd8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <initVar+0xdc>)
 8000c8e:	6013      	str	r3, [r2, #0]

	counterRed2 = AUTO_RED;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <initVar+0xc8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <initVar+0xe0>)
 8000c96:	6013      	str	r3, [r2, #0]
	counterGreen2 = AUTO_GREEN;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <initVar+0xd0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <initVar+0xe4>)
 8000c9e:	6013      	str	r3, [r2, #0]
	counterYellow2 = AUTO_YELLOW;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <initVar+0xd8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <initVar+0xe8>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	2000010c 	.word	0x2000010c
 8000cb4:	20000110 	.word	0x20000110
 8000cb8:	20000114 	.word	0x20000114
 8000cbc:	20000118 	.word	0x20000118
 8000cc0:	2000011c 	.word	0x2000011c
 8000cc4:	20000120 	.word	0x20000120
 8000cc8:	20000124 	.word	0x20000124
 8000ccc:	20000128 	.word	0x20000128
 8000cd0:	2000012c 	.word	0x2000012c
 8000cd4:	20000130 	.word	0x20000130
 8000cd8:	20000134 	.word	0x20000134
 8000cdc:	20000138 	.word	0x20000138
 8000ce0:	2000013c 	.word	0x2000013c
 8000ce4:	20000140 	.word	0x20000140
 8000ce8:	20000144 	.word	0x20000144
 8000cec:	20000150 	.word	0x20000150
 8000cf0:	20000148 	.word	0x20000148
 8000cf4:	20000154 	.word	0x20000154
 8000cf8:	2000014c 	.word	0x2000014c
 8000cfc:	20000158 	.word	0x20000158
 8000d00:	2000015c 	.word	0x2000015c
 8000d04:	20000160 	.word	0x20000160
 8000d08:	20000164 	.word	0x20000164

08000d0c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f023 030f 	bic.w	r3, r3, #15
 8000d1c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f043 030c 	orr.w	r3, r3, #12
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d38:	7bbb      	ldrb	r3, [r7, #14]
 8000d3a:	f043 030c 	orr.w	r3, r3, #12
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d4c:	f107 0208 	add.w	r2, r7, #8
 8000d50:	2364      	movs	r3, #100	; 0x64
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2304      	movs	r3, #4
 8000d56:	2142      	movs	r1, #66	; 0x42
 8000d58:	4803      	ldr	r0, [pc, #12]	; (8000d68 <lcd_send_cmd+0x5c>)
 8000d5a:	f001 fd93 	bl	8002884 <HAL_I2C_Master_Transmit>
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200003f8 	.word	0x200003f8

08000d6c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f023 030f 	bic.w	r3, r3, #15
 8000d7c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	011b      	lsls	r3, r3, #4
 8000d82:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	f043 030d 	orr.w	r3, r3, #13
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	f043 0309 	orr.w	r3, r3, #9
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	f043 030d 	orr.w	r3, r3, #13
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	f043 0309 	orr.w	r3, r3, #9
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dac:	f107 0208 	add.w	r2, r7, #8
 8000db0:	2364      	movs	r3, #100	; 0x64
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2304      	movs	r3, #4
 8000db6:	2142      	movs	r1, #66	; 0x42
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <lcd_send_data+0x5c>)
 8000dba:	f001 fd63 	bl	8002884 <HAL_I2C_Master_Transmit>
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200003f8 	.word	0x200003f8

08000dcc <lcd_init>:

void lcd_init (void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000dd0:	2033      	movs	r0, #51	; 0x33
 8000dd2:	f7ff ff9b 	bl	8000d0c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000dd6:	2032      	movs	r0, #50	; 0x32
 8000dd8:	f7ff ff98 	bl	8000d0c <lcd_send_cmd>
	HAL_Delay(50);
 8000ddc:	2032      	movs	r0, #50	; 0x32
 8000dde:	f001 f853 	bl	8001e88 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f7ff ff92 	bl	8000d0c <lcd_send_cmd>
	HAL_Delay(50);
 8000de8:	2032      	movs	r0, #50	; 0x32
 8000dea:	f001 f84d 	bl	8001e88 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000dee:	2001      	movs	r0, #1
 8000df0:	f7ff ff8c 	bl	8000d0c <lcd_send_cmd>
	HAL_Delay(50);
 8000df4:	2032      	movs	r0, #50	; 0x32
 8000df6:	f001 f847 	bl	8001e88 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000dfa:	2006      	movs	r0, #6
 8000dfc:	f7ff ff86 	bl	8000d0c <lcd_send_cmd>
	HAL_Delay(50);
 8000e00:	2032      	movs	r0, #50	; 0x32
 8000e02:	f001 f841 	bl	8001e88 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000e06:	200c      	movs	r0, #12
 8000e08:	f7ff ff80 	bl	8000d0c <lcd_send_cmd>
	HAL_Delay(50);
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f001 f83b 	bl	8001e88 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000e12:	2002      	movs	r0, #2
 8000e14:	f7ff ff7a 	bl	8000d0c <lcd_send_cmd>
	HAL_Delay(50);
 8000e18:	2032      	movs	r0, #50	; 0x32
 8000e1a:	f001 f835 	bl	8001e88 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000e1e:	2080      	movs	r0, #128	; 0x80
 8000e20:	f7ff ff74 	bl	8000d0c <lcd_send_cmd>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e30:	e006      	b.n	8000e40 <lcd_send_string+0x18>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff96 	bl	8000d6c <lcd_send_data>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f4      	bne.n	8000e32 <lcd_send_string+0xa>
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
    lcd_send_cmd (0x01);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff ff58 	bl	8000d0c <lcd_send_cmd>
    HAL_Delay(50);
 8000e5c:	2032      	movs	r0, #50	; 0x32
 8000e5e:	f001 f813 	bl	8001e88 <HAL_Delay>
    lcd_goto_XY(1, 1);
 8000e62:	2101      	movs	r1, #1
 8000e64:	2001      	movs	r0, #1
 8000e66:	f000 f802 	bl	8000e6e <lcd_goto_XY>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <lcd_goto_XY>:


void lcd_goto_XY (int row, int col)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d108      	bne.n	8000e90 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4413      	add	r3, r2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	337f      	adds	r3, #127	; 0x7f
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e008      	b.n	8000ea2 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	3340      	adds	r3, #64	; 0x40
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff31 	bl	8000d0c <lcd_send_cmd>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <lcd_send_int>:

void lcd_send_int(int value) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "%d", value);  // Chuyển số thành chuỗi
 8000ebc:	f107 000c 	add.w	r0, r7, #12
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a06      	ldr	r2, [pc, #24]	; (8000edc <lcd_send_int+0x28>)
 8000ec4:	210a      	movs	r1, #10
 8000ec6:	f004 fe3f 	bl	8005b48 <sniprintf>
    lcd_send_string(buffer);  // Gửi chuỗi đến LCD
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffaa 	bl	8000e28 <lcd_send_string>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08006450 	.word	0x08006450

08000ee0 <LED_TEST>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void LED_TEST() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <LED_TEST+0x10>)
 8000ee8:	f001 fb39 	bl	800255e <HAL_GPIO_TogglePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 ff64 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f81a 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 f8fe 	bl	8001100 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f04:	f000 f8d2 	bl	80010ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f08:	f000 f884 	bl	8001014 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f0c:	f000 f854 	bl	8000fb8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <main+0x38>)
 8000f12:	f004 f967 	bl	80051e4 <HAL_TIM_Base_Start_IT>
	run_task();
 8000f16:	f000 f9b5 	bl	8001284 <run_task>
	SCH_Add_Task(LED_TEST, 10, 1000);
 8000f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1e:	210a      	movs	r1, #10
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <main+0x3c>)
 8000f22:	f000 fa3b 	bl	800139c <SCH_Add_Task>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		SCH_Dispatch_Tasks();
 8000f26:	f000 fb0f 	bl	8001548 <SCH_Dispatch_Tasks>
 8000f2a:	e7fc      	b.n	8000f26 <main+0x32>
 8000f2c:	2000044c 	.word	0x2000044c
 8000f30:	08000ee1 	.word	0x08000ee1

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b090      	sub	sp, #64	; 0x40
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0318 	add.w	r3, r7, #24
 8000f3e:	2228      	movs	r2, #40	; 0x28
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 fdf8 	bl	8005b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5e:	2310      	movs	r3, #16
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f62:	2302      	movs	r3, #2
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000f6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fcd7 	bl	8004928 <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f80:	f000 f97a 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f84:	230f      	movs	r3, #15
 8000f86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 ff42 	bl	8004e28 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000faa:	f000 f965 	bl	8001278 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3740      	adds	r7, #64	; 0x40
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <MX_I2C1_Init+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_I2C1_Init+0x58>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff6:	f001 faed 	bl	80025d4 <HAL_I2C_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001000:	f000 f93a 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200003f8 	.word	0x200003f8
 800100c:	40005400 	.word	0x40005400
 8001010:	000186a0 	.word	0x000186a0

08001014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	463b      	mov	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_TIM2_Init+0x94>)
 800103a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800103e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001048:	2209      	movs	r2, #9
 800104a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_TIM2_Init+0x94>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_TIM2_Init+0x94>)
 800105a:	f004 f873 	bl	8005144 <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001064:	f000 f908 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001076:	f004 f9f7 	bl	8005468 <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001080:	f000 f8fa 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM2_Init+0x94>)
 8001092:	f004 fbd9 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800109c:	f000 f8ec 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000044c 	.word	0x2000044c

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART2_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f004 fc20 	bl	8005928 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 f8c3 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000494 	.word	0x20000494
 80010fc:	40004400 	.word	0x40004400

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	4b4e      	ldr	r3, [pc, #312]	; (8001250 <MX_GPIO_Init+0x150>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a4d      	ldr	r2, [pc, #308]	; (8001250 <MX_GPIO_Init+0x150>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <MX_GPIO_Init+0x150>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	4b48      	ldr	r3, [pc, #288]	; (8001250 <MX_GPIO_Init+0x150>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a47      	ldr	r2, [pc, #284]	; (8001250 <MX_GPIO_Init+0x150>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <MX_GPIO_Init+0x150>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b42      	ldr	r3, [pc, #264]	; (8001250 <MX_GPIO_Init+0x150>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a41      	ldr	r2, [pc, #260]	; (8001250 <MX_GPIO_Init+0x150>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <MX_GPIO_Init+0x150>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <MX_GPIO_Init+0x150>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a3b      	ldr	r2, [pc, #236]	; (8001250 <MX_GPIO_Init+0x150>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <MX_GPIO_Init+0x150>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|R3B_Pin|R3A_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 7148 	mov.w	r1, #800	; 0x320
 800117a:	4836      	ldr	r0, [pc, #216]	; (8001254 <MX_GPIO_Init+0x154>)
 800117c:	f001 f9d7 	bl	800252e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R2A_Pin|R1B_Pin|R2B_Pin|R1A_Pin
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8001186:	4834      	ldr	r0, [pc, #208]	; (8001258 <MX_GPIO_Init+0x158>)
 8001188:	f001 f9d1 	bl	800252e <HAL_GPIO_WritePin>
                          |R4A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	4832      	ldr	r0, [pc, #200]	; (800125c <MX_GPIO_Init+0x15c>)
 8001192:	f001 f9cc 	bl	800252e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119c:	4b30      	ldr	r3, [pc, #192]	; (8001260 <MX_GPIO_Init+0x160>)
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	482c      	ldr	r0, [pc, #176]	; (800125c <MX_GPIO_Init+0x15c>)
 80011ac:	f001 f824 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80011b0:	2313      	movs	r3, #19
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	4824      	ldr	r0, [pc, #144]	; (8001254 <MX_GPIO_Init+0x154>)
 80011c4:	f001 f818 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin R3B_Pin R3A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|R3B_Pin|R3A_Pin;
 80011c8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	481c      	ldr	r0, [pc, #112]	; (8001254 <MX_GPIO_Init+0x154>)
 80011e2:	f001 f809 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin;
 80011e6:	2301      	movs	r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON4_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <MX_GPIO_Init+0x158>)
 80011fa:	f000 fffd 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2A_Pin R1B_Pin R2B_Pin R1A_Pin
                           R4A_Pin */
  GPIO_InitStruct.Pin = R2A_Pin|R1B_Pin|R2B_Pin|R1A_Pin
 80011fe:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001202:	613b      	str	r3, [r7, #16]
                          |R4A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2302      	movs	r3, #2
 800120e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4810      	ldr	r0, [pc, #64]	; (8001258 <MX_GPIO_Init+0x158>)
 8001218:	f000 ffee 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : R4B_Pin */
  GPIO_InitStruct.Pin = R4B_Pin;
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2302      	movs	r3, #2
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R4B_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480a      	ldr	r0, [pc, #40]	; (800125c <MX_GPIO_Init+0x15c>)
 8001234:	f000 ffe0 	bl	80021f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2028      	movs	r0, #40	; 0x28
 800123e:	f000 ff1e 	bl	800207e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001242:	2028      	movs	r0, #40	; 0x28
 8001244:	f000 ff37 	bl	80020b6 <HAL_NVIC_EnableIRQ>

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40011000 	.word	0x40011000
 8001260:	10110000 	.word	0x10110000

08001264 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800126c:	f000 f920 	bl	80014b0 <SCH_Update>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <run_task>:
 *      Author: ASUS
 */

#include "run_task.h"

void run_task() {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	initWaitingTime();
 8001288:	f7ff fc92 	bl	8000bb0 <initWaitingTime>
	initVar();
 800128c:	f7ff fcc8 	bl	8000c20 <initVar>
	SCH_Init();
 8001290:	f000 f86e 	bl	8001370 <SCH_Init>

	SCH_Add_Task(autoMODE1_task, 10, 1000);
 8001294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001298:	210a      	movs	r1, #10
 800129a:	4827      	ldr	r0, [pc, #156]	; (8001338 <run_task+0xb4>)
 800129c:	f000 f87e 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(autoMODE2_task, 20, 1000);
 80012a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a4:	2114      	movs	r1, #20
 80012a6:	4825      	ldr	r0, [pc, #148]	; (800133c <run_task+0xb8>)
 80012a8:	f000 f878 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(autoMODE3_task, 30, 1000);
 80012ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012b0:	211e      	movs	r1, #30
 80012b2:	4823      	ldr	r0, [pc, #140]	; (8001340 <run_task+0xbc>)
 80012b4:	f000 f872 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(autoMODE4_task, 40, 1000);
 80012b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012bc:	2128      	movs	r1, #40	; 0x28
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <run_task+0xc0>)
 80012c0:	f000 f86c 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE2_1_task, 50, 500);
 80012c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012c8:	2132      	movs	r1, #50	; 0x32
 80012ca:	481f      	ldr	r0, [pc, #124]	; (8001348 <run_task+0xc4>)
 80012cc:	f000 f866 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE2_2_task, 1000, 100);
 80012d0:	2264      	movs	r2, #100	; 0x64
 80012d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <run_task+0xc8>)
 80012d8:	f000 f860 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE2_3_task, 60, 100);
 80012dc:	2264      	movs	r2, #100	; 0x64
 80012de:	213c      	movs	r1, #60	; 0x3c
 80012e0:	481b      	ldr	r0, [pc, #108]	; (8001350 <run_task+0xcc>)
 80012e2:	f000 f85b 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE3_1_task, 70, 500);
 80012e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012ea:	2146      	movs	r1, #70	; 0x46
 80012ec:	4819      	ldr	r0, [pc, #100]	; (8001354 <run_task+0xd0>)
 80012ee:	f000 f855 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE3_2_task, 1000, 100);
 80012f2:	2264      	movs	r2, #100	; 0x64
 80012f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012f8:	4817      	ldr	r0, [pc, #92]	; (8001358 <run_task+0xd4>)
 80012fa:	f000 f84f 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE3_3_task, 80, 100);
 80012fe:	2264      	movs	r2, #100	; 0x64
 8001300:	2150      	movs	r1, #80	; 0x50
 8001302:	4816      	ldr	r0, [pc, #88]	; (800135c <run_task+0xd8>)
 8001304:	f000 f84a 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE4_1_task, 90, 500);
 8001308:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800130c:	215a      	movs	r1, #90	; 0x5a
 800130e:	4814      	ldr	r0, [pc, #80]	; (8001360 <run_task+0xdc>)
 8001310:	f000 f844 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE4_2_task, 1000, 100);
 8001314:	2264      	movs	r2, #100	; 0x64
 8001316:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800131a:	4812      	ldr	r0, [pc, #72]	; (8001364 <run_task+0xe0>)
 800131c:	f000 f83e 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(manMODE4_3_task, 100, 100);
 8001320:	2264      	movs	r2, #100	; 0x64
 8001322:	2164      	movs	r1, #100	; 0x64
 8001324:	4810      	ldr	r0, [pc, #64]	; (8001368 <run_task+0xe4>)
 8001326:	f000 f839 	bl	800139c <SCH_Add_Task>
	SCH_Add_Task(getKeyInput, 30, 20);
 800132a:	2214      	movs	r2, #20
 800132c:	211e      	movs	r1, #30
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <run_task+0xe8>)
 8001330:	f000 f834 	bl	800139c <SCH_Add_Task>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	080002a1 	.word	0x080002a1
 800133c:	080003a5 	.word	0x080003a5
 8001340:	080004a9 	.word	0x080004a9
 8001344:	0800057d 	.word	0x0800057d
 8001348:	08000605 	.word	0x08000605
 800134c:	08000641 	.word	0x08000641
 8001350:	080006c5 	.word	0x080006c5
 8001354:	080007dd 	.word	0x080007dd
 8001358:	08000819 	.word	0x08000819
 800135c:	0800089d 	.word	0x0800089d
 8001360:	080009b9 	.word	0x080009b9
 8001364:	080009f5 	.word	0x080009f5
 8001368:	08000a79 	.word	0x08000a79
 800136c:	080001a1 	.word	0x080001a1

08001370 <SCH_Init>:
#include "scheduler.h"

static sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e006      	b.n	800138a <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f864 	bl	800144c <SCH_Delete_Task>
	for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	3301      	adds	r3, #1
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b27      	cmp	r3, #39	; 0x27
 800138e:	d9f5      	bls.n	800137c <SCH_Init+0xc>
	}
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <SCH_Add_Task>:


uint8_t SCH_Add_Task(void (*pFunction)(void), const uint32_t DELAY,
		const uint32_t PERIOD) {
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	uint8_t index = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	75fb      	strb	r3, [r7, #23]
	while ((index < SCH_MAX_TASKS) && (SCH_tasks_G[index].pTask != 0)) {
 80013ac:	e002      	b.n	80013b4 <SCH_Add_Task+0x18>
		index++;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	3301      	adds	r3, #1
 80013b2:	75fb      	strb	r3, [r7, #23]
	while ((index < SCH_MAX_TASKS) && (SCH_tasks_G[index].pTask != 0)) {
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b27      	cmp	r3, #39	; 0x27
 80013b8:	d806      	bhi.n	80013c8 <SCH_Add_Task+0x2c>
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <SCH_Add_Task+0xa8>)
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4413      	add	r3, r2
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f2      	bne.n	80013ae <SCH_Add_Task+0x12>
	}

	if (index == SCH_MAX_TASKS) {
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b28      	cmp	r3, #40	; 0x28
 80013cc:	d101      	bne.n	80013d2 <SCH_Add_Task+0x36>
		return 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e032      	b.n	8001438 <SCH_Add_Task+0x9c>
	}

	SCH_tasks_G[index].pTask = pFunction;
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <SCH_Add_Task+0xa8>)
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	4413      	add	r3, r2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay = DELAY / TICK_MS;
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	4919      	ldr	r1, [pc, #100]	; (8001448 <SCH_Add_Task+0xac>)
 80013e4:	fba1 1202 	umull	r1, r2, r1, r2
 80013e8:	08d2      	lsrs	r2, r2, #3
 80013ea:	4916      	ldr	r1, [pc, #88]	; (8001444 <SCH_Add_Task+0xa8>)
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	3304      	adds	r3, #4
 80013f2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Period = (PERIOD > 0) ? (PERIOD / TICK_MS) : 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <SCH_Add_Task+0x6a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <SCH_Add_Task+0xac>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	e000      	b.n	8001408 <SCH_Add_Task+0x6c>
 8001406:	2300      	movs	r3, #0
 8001408:	7dfa      	ldrb	r2, [r7, #23]
 800140a:	490e      	ldr	r1, [pc, #56]	; (8001444 <SCH_Add_Task+0xa8>)
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	440a      	add	r2, r1
 8001410:	3208      	adds	r2, #8
 8001412:	6013      	str	r3, [r2, #0]
	SCH_tasks_G[index].Runme = 0;
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <SCH_Add_Task+0xa8>)
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	330c      	adds	r3, #12
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[index].TaskID = index + 1;
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	7dfa      	ldrb	r2, [r7, #23]
 8001426:	3201      	adds	r2, #1
 8001428:	b2d1      	uxtb	r1, r2
 800142a:	4a06      	ldr	r2, [pc, #24]	; (8001444 <SCH_Add_Task+0xa8>)
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	330d      	adds	r3, #13
 8001432:	460a      	mov	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]

	return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000168 	.word	0x20000168
 8001448:	cccccccd 	.word	0xcccccccd

0800144c <SCH_Delete_Task>:

void SCH_Delete_Task(const uint8_t TASK_INDEX) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	if (TASK_INDEX < SCH_MAX_TASKS) {
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b27      	cmp	r3, #39	; 0x27
 800145a:	d821      	bhi.n	80014a0 <SCH_Delete_Task+0x54>
		SCH_tasks_G[TASK_INDEX].pTask = 0;
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <SCH_Delete_Task+0x60>)
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <SCH_Delete_Task+0x60>)
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	3304      	adds	r3, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Period = 0;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <SCH_Delete_Task+0x60>)
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	3308      	adds	r3, #8
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Runme = 0;
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <SCH_Delete_Task+0x60>)
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4413      	add	r3, r2
 800148c:	330c      	adds	r3, #12
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].TaskID = 0;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SCH_Delete_Task+0x60>)
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	330d      	adds	r3, #13
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
	}
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000168 	.word	0x20000168

080014b0 <SCH_Update>:

void SCH_Update(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
	for (uint8_t index = 0; index < SCH_MAX_TASKS; index++) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e039      	b.n	8001530 <SCH_Update+0x80>
		if (SCH_tasks_G[index].pTask != 0) {
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <SCH_Update+0x94>)
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d02f      	beq.n	800152a <SCH_Update+0x7a>
			if (SCH_tasks_G[index].Delay > 0) {
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <SCH_Update+0x94>)
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	3304      	adds	r3, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00c      	beq.n	80014f4 <SCH_Update+0x44>
				SCH_tasks_G[index].Delay--;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4919      	ldr	r1, [pc, #100]	; (8001544 <SCH_Update+0x94>)
 80014de:	011a      	lsls	r2, r3, #4
 80014e0:	440a      	add	r2, r1
 80014e2:	3204      	adds	r2, #4
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	3a01      	subs	r2, #1
 80014e8:	4916      	ldr	r1, [pc, #88]	; (8001544 <SCH_Update+0x94>)
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	440b      	add	r3, r1
 80014ee:	3304      	adds	r3, #4
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e01a      	b.n	800152a <SCH_Update+0x7a>
			} else {
				SCH_tasks_G[index].Runme = 1;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <SCH_Update+0x94>)
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4413      	add	r3, r2
 80014fc:	330c      	adds	r3, #12
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[index].Period > 0) {
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <SCH_Update+0x94>)
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	4413      	add	r3, r2
 800150a:	3308      	adds	r3, #8
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <SCH_Update+0x7a>
					SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period; // Reset delay cho nhiệm vụ định kỳ
 8001512:	79fa      	ldrb	r2, [r7, #7]
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	490b      	ldr	r1, [pc, #44]	; (8001544 <SCH_Update+0x94>)
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	440a      	add	r2, r1
 800151c:	3208      	adds	r2, #8
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	4908      	ldr	r1, [pc, #32]	; (8001544 <SCH_Update+0x94>)
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	440b      	add	r3, r1
 8001526:	3304      	adds	r3, #4
 8001528:	601a      	str	r2, [r3, #0]
	for (uint8_t index = 0; index < SCH_MAX_TASKS; index++) {
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	3301      	adds	r3, #1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b27      	cmp	r3, #39	; 0x27
 8001534:	d9c2      	bls.n	80014bc <SCH_Update+0xc>
				}
			}
		}
	}
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000168 	.word	0x20000168

08001548 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	for (uint8_t index = 0; index < SCH_MAX_TASKS; index++) {
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e031      	b.n	80015b8 <SCH_Dispatch_Tasks+0x70>
		if (SCH_tasks_G[index].Runme > 0) {
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <SCH_Dispatch_Tasks+0x80>)
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	330c      	adds	r3, #12
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d026      	beq.n	80015b2 <SCH_Dispatch_Tasks+0x6a>
			SCH_tasks_G[index].Runme--; // Reset cờ Runme
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4918      	ldr	r1, [pc, #96]	; (80015c8 <SCH_Dispatch_Tasks+0x80>)
 8001568:	011a      	lsls	r2, r3, #4
 800156a:	440a      	add	r2, r1
 800156c:	320c      	adds	r2, #12
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	3a01      	subs	r2, #1
 8001572:	b2d1      	uxtb	r1, r2
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <SCH_Dispatch_Tasks+0x80>)
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	330c      	adds	r3, #12
 800157c:	460a      	mov	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]


			if (SCH_tasks_G[index].pTask) {
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <SCH_Dispatch_Tasks+0x80>)
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <SCH_Dispatch_Tasks+0x52>
				(*SCH_tasks_G[index].pTask)();
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <SCH_Dispatch_Tasks+0x80>)
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4798      	blx	r3
			}

			if (SCH_tasks_G[index].Period == 0) {
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SCH_Dispatch_Tasks+0x80>)
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	3308      	adds	r3, #8
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <SCH_Dispatch_Tasks+0x6a>
				SCH_Delete_Task(index);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff4d 	bl	800144c <SCH_Delete_Task>
	for (uint8_t index = 0; index < SCH_MAX_TASKS; index++) {
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	3301      	adds	r3, #1
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b27      	cmp	r3, #39	; 0x27
 80015bc:	d9ca      	bls.n	8001554 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000168 	.word	0x20000168

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_MspInit+0x5c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_MspInit+0x5c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6193      	str	r3, [r2, #24]
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_MspInit+0x5c>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_MspInit+0x5c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_MspInit+0x5c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_MspInit+0x5c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_MspInit+0x60>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_MspInit+0x60>)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000

08001630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <HAL_I2C_MspInit+0xb0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d142      	bne.n	80016d6 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_I2C_MspInit+0xb4>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <HAL_I2C_MspInit+0xb4>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_I2C_MspInit+0xb4>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001668:	f44f 7340 	mov.w	r3, #768	; 0x300
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <HAL_I2C_MspInit+0xb8>)
 800167e:	f000 fdbb 	bl	80021f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_I2C_MspInit+0xbc>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_I2C_MspInit+0xbc>)
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_I2C_MspInit+0xb4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <HAL_I2C_MspInit+0xb4>)
 80016a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_I2C_MspInit+0xb4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	201f      	movs	r0, #31
 80016bc:	f000 fcdf 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016c0:	201f      	movs	r0, #31
 80016c2:	f000 fcf8 	bl	80020b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2020      	movs	r0, #32
 80016cc:	f000 fcd7 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016d0:	2020      	movs	r0, #32
 80016d2:	f000 fcf0 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40005400 	.word	0x40005400
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010c00 	.word	0x40010c00
 80016ec:	40010000 	.word	0x40010000

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001700:	d113      	bne.n	800172a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_TIM_Base_MspInit+0x44>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_TIM_Base_MspInit+0x44>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_TIM_Base_MspInit+0x44>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	201c      	movs	r0, #28
 8001720:	f000 fcad 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001724:	201c      	movs	r0, #28
 8001726:	f000 fcc6 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <HAL_UART_MspInit+0x70>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d123      	bne.n	80017a0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_UART_MspInit+0x74>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <HAL_UART_MspInit+0x74>)
 800175e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001762:	61d3      	str	r3, [r2, #28]
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_UART_MspInit+0x74>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_UART_MspInit+0x74>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_UART_MspInit+0x74>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_UART_MspInit+0x74>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001788:	230c      	movs	r3, #12
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_UART_MspInit+0x78>)
 800179c:	f000 fd2c 	bl	80021f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40004400 	.word	0x40004400
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010800 	.word	0x40010800

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fa:	f000 fb29 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM2_IRQHandler+0x10>)
 800180a:	f003 fd3d 	bl	8005288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000044c 	.word	0x2000044c

08001818 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <I2C1_EV_IRQHandler+0x10>)
 800181e:	f001 f92f 	bl	8002a80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200003f8 	.word	0x200003f8

0800182c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <I2C1_ER_IRQHandler+0x10>)
 8001832:	f001 fa96 	bl	8002d62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200003f8 	.word	0x200003f8

08001840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001844:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001848:	f000 fea2 	bl	8002590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
		errno = ENOMEM;
 8001880:	f004 f930 	bl	8005ae4 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20005000 	.word	0x20005000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	200003e8 	.word	0x200003e8
 80018b8:	200004f0 	.word	0x200004f0

080018bc <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <enableRed1>:
uint8_t greenState1 = 0;   // 0: ON, 1: OFF
uint8_t redState2 = 1;     // 0: ON, 1: OFF
uint8_t yellowState2 = 1;  // 0: ON, 1: OFF
uint8_t greenState2 = 1;   // 0: ON, 1: OFF

void enableRed1(){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2120      	movs	r1, #32
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <enableRed1+0x1c>)
 80018d2:	f000 fe2c 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2108      	movs	r1, #8
 80018da:	4802      	ldr	r0, [pc, #8]	; (80018e4 <enableRed1+0x1c>)
 80018dc:	f000 fe27 	bl	800252e <HAL_GPIO_WritePin>
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40010c00 	.word	0x40010c00

080018e8 <enableYellow1>:

void enableYellow1(){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2120      	movs	r1, #32
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <enableYellow1+0x1c>)
 80018f2:	f000 fe1c 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2108      	movs	r1, #8
 80018fa:	4802      	ldr	r0, [pc, #8]	; (8001904 <enableYellow1+0x1c>)
 80018fc:	f000 fe17 	bl	800252e <HAL_GPIO_WritePin>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40010c00 	.word	0x40010c00

08001908 <enableGreen1>:
void enableGreen1(){
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2120      	movs	r1, #32
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <enableGreen1+0x1c>)
 8001912:	f000 fe0c 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, SET);
 8001916:	2201      	movs	r2, #1
 8001918:	2108      	movs	r1, #8
 800191a:	4802      	ldr	r0, [pc, #8]	; (8001924 <enableGreen1+0x1c>)
 800191c:	f000 fe07 	bl	800252e <HAL_GPIO_WritePin>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40010c00 	.word	0x40010c00

08001928 <enableRed2>:

void enableRed2(){
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, SET);
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <enableRed2+0x20>)
 8001934:	f000 fdfb 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, SET);
 8001938:	2201      	movs	r2, #1
 800193a:	2110      	movs	r1, #16
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <enableRed2+0x20>)
 800193e:	f000 fdf6 	bl	800252e <HAL_GPIO_WritePin>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40010c00 	.word	0x40010c00

0800194c <enableYellow2>:

void enableYellow2(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <enableYellow2+0x20>)
 8001958:	f000 fde9 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2110      	movs	r1, #16
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <enableYellow2+0x20>)
 8001962:	f000 fde4 	bl	800252e <HAL_GPIO_WritePin>
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40010c00 	.word	0x40010c00

08001970 <enableGreen2>:
void enableGreen2(){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <enableGreen2+0x20>)
 800197c:	f000 fdd7 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, SET);
 8001980:	2201      	movs	r2, #1
 8001982:	2110      	movs	r1, #16
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <enableGreen2+0x20>)
 8001986:	f000 fdd2 	bl	800252e <HAL_GPIO_WritePin>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40010c00 	.word	0x40010c00

08001994 <enableRed3>:

void enableRed3(){
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <enableRed3+0x20>)
 80019a0:	f000 fdc5 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019aa:	4802      	ldr	r0, [pc, #8]	; (80019b4 <enableRed3+0x20>)
 80019ac:	f000 fdbf 	bl	800252e <HAL_GPIO_WritePin>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010800 	.word	0x40010800

080019b8 <enableYellow3>:

void enableYellow3(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <enableYellow3+0x20>)
 80019c4:	f000 fdb3 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ce:	4802      	ldr	r0, [pc, #8]	; (80019d8 <enableYellow3+0x20>)
 80019d0:	f000 fdad 	bl	800252e <HAL_GPIO_WritePin>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40010800 	.word	0x40010800

080019dc <enableGreen3>:
void enableGreen3(){
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <enableGreen3+0x20>)
 80019e8:	f000 fda1 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f2:	4802      	ldr	r0, [pc, #8]	; (80019fc <enableGreen3+0x20>)
 80019f4:	f000 fd9b 	bl	800252e <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40010800 	.word	0x40010800

08001a00 <enableRed4>:

void enableRed4(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2140      	movs	r1, #64	; 0x40
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <enableRed4+0x1c>)
 8001a0a:	f000 fd90 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4803      	ldr	r0, [pc, #12]	; (8001a20 <enableRed4+0x20>)
 8001a14:	f000 fd8b 	bl	800252e <HAL_GPIO_WritePin>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40010c00 	.word	0x40010c00
 8001a20:	40011000 	.word	0x40011000

08001a24 <enableYellow4>:

void enableYellow4(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <enableYellow4+0x1c>)
 8001a2e:	f000 fd7e 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	4803      	ldr	r0, [pc, #12]	; (8001a44 <enableYellow4+0x20>)
 8001a38:	f000 fd79 	bl	800252e <HAL_GPIO_WritePin>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	40011000 	.word	0x40011000

08001a48 <enableGreen4>:
void enableGreen4(){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <enableGreen4+0x1c>)
 8001a52:	f000 fd6c 	bl	800252e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <enableGreen4+0x20>)
 8001a5c:	f000 fd67 	bl	800252e <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000

08001a6c <toggleRED1>:


void toggleRED1(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	if (redState1 == 0) {
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <toggleRED1+0x78>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d119      	bne.n	8001aac <toggleRED1+0x40>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	481a      	ldr	r0, [pc, #104]	; (8001ae8 <toggleRED1+0x7c>)
 8001a7e:	f000 fd56 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	2108      	movs	r1, #8
 8001a86:	4818      	ldr	r0, [pc, #96]	; (8001ae8 <toggleRED1+0x7c>)
 8001a88:	f000 fd51 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a92:	4816      	ldr	r0, [pc, #88]	; (8001aec <toggleRED1+0x80>)
 8001a94:	f000 fd4b 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9e:	4813      	ldr	r0, [pc, #76]	; (8001aec <toggleRED1+0x80>)
 8001aa0:	f000 fd45 	bl	800252e <HAL_GPIO_WritePin>
		redState1 = 1;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <toggleRED1+0x78>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, RESET);
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, RESET);
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, RESET);
		redState1 = 0;
	}
}
 8001aaa:	e018      	b.n	8001ade <toggleRED1+0x72>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2120      	movs	r1, #32
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <toggleRED1+0x7c>)
 8001ab2:	f000 fd3c 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2108      	movs	r1, #8
 8001aba:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <toggleRED1+0x7c>)
 8001abc:	f000 fd37 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac6:	4809      	ldr	r0, [pc, #36]	; (8001aec <toggleRED1+0x80>)
 8001ac8:	f000 fd31 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <toggleRED1+0x80>)
 8001ad4:	f000 fd2b 	bl	800252e <HAL_GPIO_WritePin>
		redState1 = 0;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <toggleRED1+0x78>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003ec 	.word	0x200003ec
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	40010800 	.word	0x40010800

08001af0 <toggleRED2>:

void toggleRED2(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	if (redState2 == 0) {
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <toggleRED2+0x74>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d118      	bne.n	8001b2e <toggleRED2+0x3e>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b02:	4819      	ldr	r0, [pc, #100]	; (8001b68 <toggleRED2+0x78>)
 8001b04:	f000 fd13 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	4816      	ldr	r0, [pc, #88]	; (8001b68 <toggleRED2+0x78>)
 8001b0e:	f000 fd0e 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	2140      	movs	r1, #64	; 0x40
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <toggleRED2+0x78>)
 8001b18:	f000 fd09 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	4812      	ldr	r0, [pc, #72]	; (8001b6c <toggleRED2+0x7c>)
 8001b22:	f000 fd04 	bl	800252e <HAL_GPIO_WritePin>
		redState2 = 1;
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <toggleRED2+0x74>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, RESET);
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, RESET);
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, RESET);
		redState2 = 0;
	}
}
 8001b2c:	e017      	b.n	8001b5e <toggleRED2+0x6e>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <toggleRED2+0x78>)
 8001b36:	f000 fcfa 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	480a      	ldr	r0, [pc, #40]	; (8001b68 <toggleRED2+0x78>)
 8001b40:	f000 fcf5 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <toggleRED2+0x78>)
 8001b4a:	f000 fcf0 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <toggleRED2+0x7c>)
 8001b54:	f000 fceb 	bl	800252e <HAL_GPIO_WritePin>
		redState2 = 0;
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <toggleRED2+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000064 	.word	0x20000064
 8001b68:	40010c00 	.word	0x40010c00
 8001b6c:	40011000 	.word	0x40011000

08001b70 <toggleGREEN1>:


void toggleGREEN1(){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	if (greenState1 == 0) {
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <toggleGREEN1+0x78>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d119      	bne.n	8001bb0 <toggleGREEN1+0x40>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2120      	movs	r1, #32
 8001b80:	481a      	ldr	r0, [pc, #104]	; (8001bec <toggleGREEN1+0x7c>)
 8001b82:	f000 fcd4 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2108      	movs	r1, #8
 8001b8a:	4818      	ldr	r0, [pc, #96]	; (8001bec <toggleGREEN1+0x7c>)
 8001b8c:	f000 fccf 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b96:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <toggleGREEN1+0x80>)
 8001b98:	f000 fcc9 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba2:	4813      	ldr	r0, [pc, #76]	; (8001bf0 <toggleGREEN1+0x80>)
 8001ba4:	f000 fcc3 	bl	800252e <HAL_GPIO_WritePin>
		greenState1 = 1;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <toggleGREEN1+0x78>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, RESET);
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, RESET);
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, RESET);
		greenState1 = 0;
	}
}
 8001bae:	e018      	b.n	8001be2 <toggleGREEN1+0x72>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <toggleGREEN1+0x7c>)
 8001bb6:	f000 fcba 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	480b      	ldr	r0, [pc, #44]	; (8001bec <toggleGREEN1+0x7c>)
 8001bc0:	f000 fcb5 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bca:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <toggleGREEN1+0x80>)
 8001bcc:	f000 fcaf 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd6:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <toggleGREEN1+0x80>)
 8001bd8:	f000 fca9 	bl	800252e <HAL_GPIO_WritePin>
		greenState1 = 0;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <toggleGREEN1+0x78>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200003ee 	.word	0x200003ee
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40010800 	.word	0x40010800

08001bf4 <toggleGREEN2>:

void toggleGREEN2(){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	if (greenState2 == 0) {
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <toggleGREEN2+0x74>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d118      	bne.n	8001c32 <toggleGREEN2+0x3e>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c06:	4819      	ldr	r0, [pc, #100]	; (8001c6c <toggleGREEN2+0x78>)
 8001c08:	f000 fc91 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2110      	movs	r1, #16
 8001c10:	4816      	ldr	r0, [pc, #88]	; (8001c6c <toggleGREEN2+0x78>)
 8001c12:	f000 fc8c 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	4814      	ldr	r0, [pc, #80]	; (8001c6c <toggleGREEN2+0x78>)
 8001c1c:	f000 fc87 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, SET);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <toggleGREEN2+0x7c>)
 8001c26:	f000 fc82 	bl	800252e <HAL_GPIO_WritePin>
		greenState2 = 1;
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <toggleGREEN2+0x74>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, RESET);
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, RESET);
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, RESET);
		greenState2 = 0;
	}
}
 8001c30:	e017      	b.n	8001c62 <toggleGREEN2+0x6e>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <toggleGREEN2+0x78>)
 8001c3a:	f000 fc78 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2110      	movs	r1, #16
 8001c42:	480a      	ldr	r0, [pc, #40]	; (8001c6c <toggleGREEN2+0x78>)
 8001c44:	f000 fc73 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2140      	movs	r1, #64	; 0x40
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <toggleGREEN2+0x78>)
 8001c4e:	f000 fc6e 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <toggleGREEN2+0x7c>)
 8001c58:	f000 fc69 	bl	800252e <HAL_GPIO_WritePin>
		greenState2 = 0;
 8001c5c:	4b02      	ldr	r3, [pc, #8]	; (8001c68 <toggleGREEN2+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000066 	.word	0x20000066
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	40011000 	.word	0x40011000

08001c74 <toggleYELLOW1>:


void toggleYELLOW1(){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	if (yellowState1 == 0) {
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <toggleYELLOW1+0x78>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d119      	bne.n	8001cb4 <toggleYELLOW1+0x40>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	2120      	movs	r1, #32
 8001c84:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <toggleYELLOW1+0x7c>)
 8001c86:	f000 fc52 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <toggleYELLOW1+0x7c>)
 8001c90:	f000 fc4d 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c9a:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <toggleYELLOW1+0x80>)
 8001c9c:	f000 fc47 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca6:	4813      	ldr	r0, [pc, #76]	; (8001cf4 <toggleYELLOW1+0x80>)
 8001ca8:	f000 fc41 	bl	800252e <HAL_GPIO_WritePin>
		yellowState1 = 1;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <toggleYELLOW1+0x78>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, RESET);
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, RESET);
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, RESET);
		yellowState1 = 0;
	}
}
 8001cb2:	e018      	b.n	8001ce6 <toggleYELLOW1+0x72>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <toggleYELLOW1+0x7c>)
 8001cba:	f000 fc38 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2108      	movs	r1, #8
 8001cc2:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <toggleYELLOW1+0x7c>)
 8001cc4:	f000 fc33 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3A_GPIO_Port, R3A_Pin, RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cce:	4809      	ldr	r0, [pc, #36]	; (8001cf4 <toggleYELLOW1+0x80>)
 8001cd0:	f000 fc2d 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3B_GPIO_Port, R3B_Pin, RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <toggleYELLOW1+0x80>)
 8001cdc:	f000 fc27 	bl	800252e <HAL_GPIO_WritePin>
		yellowState1 = 0;
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <toggleYELLOW1+0x78>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200003ed 	.word	0x200003ed
 8001cf0:	40010c00 	.word	0x40010c00
 8001cf4:	40010800 	.word	0x40010800

08001cf8 <toggleYELLOW2>:

void toggleYELLOW2(){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	if (yellowState2 == 0) {
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <toggleYELLOW2+0x74>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d118      	bne.n	8001d36 <toggleYELLOW2+0x3e>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d0a:	4819      	ldr	r0, [pc, #100]	; (8001d70 <toggleYELLOW2+0x78>)
 8001d0c:	f000 fc0f 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2110      	movs	r1, #16
 8001d14:	4816      	ldr	r0, [pc, #88]	; (8001d70 <toggleYELLOW2+0x78>)
 8001d16:	f000 fc0a 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, SET);
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	4814      	ldr	r0, [pc, #80]	; (8001d70 <toggleYELLOW2+0x78>)
 8001d20:	f000 fc05 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	4812      	ldr	r0, [pc, #72]	; (8001d74 <toggleYELLOW2+0x7c>)
 8001d2a:	f000 fc00 	bl	800252e <HAL_GPIO_WritePin>
		yellowState2 = 1;
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <toggleYELLOW2+0x74>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, RESET);
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, RESET);
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, RESET);
		yellowState2 = 0;
	}
}
 8001d34:	e017      	b.n	8001d66 <toggleYELLOW2+0x6e>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <toggleYELLOW2+0x78>)
 8001d3e:	f000 fbf6 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2110      	movs	r1, #16
 8001d46:	480a      	ldr	r0, [pc, #40]	; (8001d70 <toggleYELLOW2+0x78>)
 8001d48:	f000 fbf1 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4A_GPIO_Port, R4A_Pin, RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	4807      	ldr	r0, [pc, #28]	; (8001d70 <toggleYELLOW2+0x78>)
 8001d52:	f000 fbec 	bl	800252e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4B_GPIO_Port, R4B_Pin, RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <toggleYELLOW2+0x7c>)
 8001d5c:	f000 fbe7 	bl	800252e <HAL_GPIO_WritePin>
		yellowState2 = 0;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <toggleYELLOW2+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000065 	.word	0x20000065
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40011000 	.word	0x40011000

08001d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d78:	f7ff fda0 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480b      	ldr	r0, [pc, #44]	; (8001dac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d7e:	490c      	ldr	r1, [pc, #48]	; (8001db0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d94:	4c09      	ldr	r4, [pc, #36]	; (8001dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f003 fea5 	bl	8005af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da6:	f7ff f8a5 	bl	8000ef4 <main>
  bx lr
 8001daa:	4770      	bx	lr
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001db4:	080064bc 	.word	0x080064bc
  ldr r2, =_sbss
 8001db8:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001dbc:	200004f0 	.word	0x200004f0

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x28>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x28>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 f947 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff fbf4 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f95f 	bl	80020d2 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 f927 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000060 	.word	0x20000060
 8001e48:	2000006c 	.word	0x2000006c
 8001e4c:	20000068 	.word	0x20000068

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_IncTick+0x20>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	2000006c 	.word	0x2000006c
 8001e70:	200004dc 	.word	0x200004dc

08001e74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_GetTick+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	200004dc 	.word	0x200004dc

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffe0 	bl	8001e74 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000006c 	.word	0x2000006c

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4906      	ldr	r1, [pc, #24]	; (8001f68 <__NVIC_EnableIRQ+0x34>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff90 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff2d 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff42 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff90 	bl	8001fc0 <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5f 	bl	8001f6c <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff35 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d005      	beq.n	8002110 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2204      	movs	r2, #4
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e051      	b.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 020e 	bic.w	r2, r2, #14
 800211e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <HAL_DMA_Abort_IT+0xd4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d029      	beq.n	800218e <HAL_DMA_Abort_IT+0xa2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <HAL_DMA_Abort_IT+0xd8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_DMA_Abort_IT+0x9e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_DMA_Abort_IT+0xdc>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01a      	beq.n	8002184 <HAL_DMA_Abort_IT+0x98>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <HAL_DMA_Abort_IT+0xe0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d012      	beq.n	800217e <HAL_DMA_Abort_IT+0x92>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_DMA_Abort_IT+0xe4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00a      	beq.n	8002178 <HAL_DMA_Abort_IT+0x8c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <HAL_DMA_Abort_IT+0xe8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d102      	bne.n	8002172 <HAL_DMA_Abort_IT+0x86>
 800216c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002170:	e00e      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 8002172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002176:	e00b      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 8002178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800217c:	e008      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	e005      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 8002184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002188:	e002      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 800218a:	2310      	movs	r3, #16
 800218c:	e000      	b.n	8002190 <HAL_DMA_Abort_IT+0xa4>
 800218e:	2301      	movs	r3, #1
 8002190:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <HAL_DMA_Abort_IT+0xec>)
 8002192:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
    } 
  }
  return status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40020008 	.word	0x40020008
 80021c4:	4002001c 	.word	0x4002001c
 80021c8:	40020030 	.word	0x40020030
 80021cc:	40020044 	.word	0x40020044
 80021d0:	40020058 	.word	0x40020058
 80021d4:	4002006c 	.word	0x4002006c
 80021d8:	40020000 	.word	0x40020000

080021dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021ea:	b2db      	uxtb	r3, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b08b      	sub	sp, #44	; 0x2c
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220a:	e169      	b.n	80024e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800220c:	2201      	movs	r2, #1
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8158 	bne.w	80024da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a9a      	ldr	r2, [pc, #616]	; (8002498 <HAL_GPIO_Init+0x2a0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d05e      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002234:	4a98      	ldr	r2, [pc, #608]	; (8002498 <HAL_GPIO_Init+0x2a0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d875      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800223a:	4a98      	ldr	r2, [pc, #608]	; (800249c <HAL_GPIO_Init+0x2a4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d058      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002240:	4a96      	ldr	r2, [pc, #600]	; (800249c <HAL_GPIO_Init+0x2a4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d86f      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002246:	4a96      	ldr	r2, [pc, #600]	; (80024a0 <HAL_GPIO_Init+0x2a8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d052      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 800224c:	4a94      	ldr	r2, [pc, #592]	; (80024a0 <HAL_GPIO_Init+0x2a8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d869      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002252:	4a94      	ldr	r2, [pc, #592]	; (80024a4 <HAL_GPIO_Init+0x2ac>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d04c      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002258:	4a92      	ldr	r2, [pc, #584]	; (80024a4 <HAL_GPIO_Init+0x2ac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d863      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800225e:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <HAL_GPIO_Init+0x2b0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d046      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002264:	4a90      	ldr	r2, [pc, #576]	; (80024a8 <HAL_GPIO_Init+0x2b0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d85d      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800226a:	2b12      	cmp	r3, #18
 800226c:	d82a      	bhi.n	80022c4 <HAL_GPIO_Init+0xcc>
 800226e:	2b12      	cmp	r3, #18
 8002270:	d859      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_GPIO_Init+0x80>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	080022f3 	.word	0x080022f3
 800227c:	080022cd 	.word	0x080022cd
 8002280:	080022df 	.word	0x080022df
 8002284:	08002321 	.word	0x08002321
 8002288:	08002327 	.word	0x08002327
 800228c:	08002327 	.word	0x08002327
 8002290:	08002327 	.word	0x08002327
 8002294:	08002327 	.word	0x08002327
 8002298:	08002327 	.word	0x08002327
 800229c:	08002327 	.word	0x08002327
 80022a0:	08002327 	.word	0x08002327
 80022a4:	08002327 	.word	0x08002327
 80022a8:	08002327 	.word	0x08002327
 80022ac:	08002327 	.word	0x08002327
 80022b0:	08002327 	.word	0x08002327
 80022b4:	08002327 	.word	0x08002327
 80022b8:	08002327 	.word	0x08002327
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022e9 	.word	0x080022e9
 80022c4:	4a79      	ldr	r2, [pc, #484]	; (80024ac <HAL_GPIO_Init+0x2b4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ca:	e02c      	b.n	8002326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	623b      	str	r3, [r7, #32]
          break;
 80022d2:	e029      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	3304      	adds	r3, #4
 80022da:	623b      	str	r3, [r7, #32]
          break;
 80022dc:	e024      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	3308      	adds	r3, #8
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e01f      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	330c      	adds	r3, #12
 80022ee:	623b      	str	r3, [r7, #32]
          break;
 80022f0:	e01a      	b.n	8002328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022fa:	2304      	movs	r3, #4
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e013      	b.n	8002328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002308:	2308      	movs	r3, #8
 800230a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	611a      	str	r2, [r3, #16]
          break;
 8002312:	e009      	b.n	8002328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	615a      	str	r2, [r3, #20]
          break;
 800231e:	e003      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x130>
          break;
 8002326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d801      	bhi.n	8002332 <HAL_GPIO_Init+0x13a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	e001      	b.n	8002336 <HAL_GPIO_Init+0x13e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d802      	bhi.n	8002344 <HAL_GPIO_Init+0x14c>
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0x152>
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	3b08      	subs	r3, #8
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	210f      	movs	r1, #15
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	431a      	orrs	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80b1 	beq.w	80024da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002378:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <HAL_GPIO_Init+0x2bc>)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a40      	ldr	r2, [pc, #256]	; (80024b8 <HAL_GPIO_Init+0x2c0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_GPIO_Init+0x1ec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3f      	ldr	r2, [pc, #252]	; (80024bc <HAL_GPIO_Init+0x2c4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00d      	beq.n	80023e0 <HAL_GPIO_Init+0x1e8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <HAL_GPIO_Init+0x2c8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <HAL_GPIO_Init+0x1e4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <HAL_GPIO_Init+0x2cc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_GPIO_Init+0x1e0>
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023d8:	2304      	movs	r3, #4
 80023da:	e004      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023dc:	2302      	movs	r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023e4:	2300      	movs	r3, #0
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	0092      	lsls	r2, r2, #2
 80023ee:	4093      	lsls	r3, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023f6:	492f      	ldr	r1, [pc, #188]	; (80024b4 <HAL_GPIO_Init+0x2bc>)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	492c      	ldr	r1, [pc, #176]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4928      	ldr	r1, [pc, #160]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002428:	4013      	ands	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4922      	ldr	r1, [pc, #136]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	43db      	mvns	r3, r3
 800244e:	491e      	ldr	r1, [pc, #120]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002450:	4013      	ands	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4918      	ldr	r1, [pc, #96]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4914      	ldr	r1, [pc, #80]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002478:	4013      	ands	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d021      	beq.n	80024cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e021      	b.n	80024da <HAL_GPIO_Init+0x2e2>
 8002496:	bf00      	nop
 8002498:	10320000 	.word	0x10320000
 800249c:	10310000 	.word	0x10310000
 80024a0:	10220000 	.word	0x10220000
 80024a4:	10210000 	.word	0x10210000
 80024a8:	10120000 	.word	0x10120000
 80024ac:	10110000 	.word	0x10110000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40010800 	.word	0x40010800
 80024bc:	40010c00 	.word	0x40010c00
 80024c0:	40011000 	.word	0x40011000
 80024c4:	40011400 	.word	0x40011400
 80024c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_GPIO_Init+0x304>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4909      	ldr	r1, [pc, #36]	; (80024fc <HAL_GPIO_Init+0x304>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f ae8e 	bne.w	800220c <HAL_GPIO_Init+0x14>
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	372c      	adds	r7, #44	; 0x2c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e001      	b.n	8002522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	807b      	strh	r3, [r7, #2]
 800253a:	4613      	mov	r3, r2
 800253c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800253e:	787b      	ldrb	r3, [r7, #1]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002544:	887a      	ldrh	r2, [r7, #2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800254a:	e003      	b.n	8002554 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	041a      	lsls	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	611a      	str	r2, [r3, #16]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800255e:	b480      	push	{r7}
 8002560:	b085      	sub	sp, #20
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002570:	887a      	ldrh	r2, [r7, #2]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	041a      	lsls	r2, r3, #16
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43d9      	mvns	r1, r3
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	400b      	ands	r3, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	611a      	str	r2, [r3, #16]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f806 	bl	80025c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e12b      	b.n	800283e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff f818 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002638:	f002 fd3e 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 800263c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4a81      	ldr	r2, [pc, #516]	; (8002848 <HAL_I2C_Init+0x274>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d807      	bhi.n	8002658 <HAL_I2C_Init+0x84>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a80      	ldr	r2, [pc, #512]	; (800284c <HAL_I2C_Init+0x278>)
 800264c:	4293      	cmp	r3, r2
 800264e:	bf94      	ite	ls
 8002650:	2301      	movls	r3, #1
 8002652:	2300      	movhi	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	e006      	b.n	8002666 <HAL_I2C_Init+0x92>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a7d      	ldr	r2, [pc, #500]	; (8002850 <HAL_I2C_Init+0x27c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	bf94      	ite	ls
 8002660:	2301      	movls	r3, #1
 8002662:	2300      	movhi	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0e7      	b.n	800283e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a78      	ldr	r2, [pc, #480]	; (8002854 <HAL_I2C_Init+0x280>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0c9b      	lsrs	r3, r3, #18
 8002678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a6a      	ldr	r2, [pc, #424]	; (8002848 <HAL_I2C_Init+0x274>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d802      	bhi.n	80026a8 <HAL_I2C_Init+0xd4>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3301      	adds	r3, #1
 80026a6:	e009      	b.n	80026bc <HAL_I2C_Init+0xe8>
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	4a69      	ldr	r2, [pc, #420]	; (8002858 <HAL_I2C_Init+0x284>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	3301      	adds	r3, #1
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	495c      	ldr	r1, [pc, #368]	; (8002848 <HAL_I2C_Init+0x274>)
 80026d8:	428b      	cmp	r3, r1
 80026da:	d819      	bhi.n	8002710 <HAL_I2C_Init+0x13c>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e59      	subs	r1, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ea:	1c59      	adds	r1, r3, #1
 80026ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026f0:	400b      	ands	r3, r1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_I2C_Init+0x138>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1e59      	subs	r1, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fbb1 f3f3 	udiv	r3, r1, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270a:	e051      	b.n	80027b0 <HAL_I2C_Init+0x1dc>
 800270c:	2304      	movs	r3, #4
 800270e:	e04f      	b.n	80027b0 <HAL_I2C_Init+0x1dc>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <HAL_I2C_Init+0x168>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e012      	b.n	8002762 <HAL_I2C_Init+0x18e>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	0099      	lsls	r1, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Init+0x196>
 8002766:	2301      	movs	r3, #1
 8002768:	e022      	b.n	80027b0 <HAL_I2C_Init+0x1dc>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10e      	bne.n	8002790 <HAL_I2C_Init+0x1bc>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e58      	subs	r0, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	440b      	add	r3, r1
 8002780:	fbb0 f3f3 	udiv	r3, r0, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278e:	e00f      	b.n	80027b0 <HAL_I2C_Init+0x1dc>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	0099      	lsls	r1, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	6809      	ldr	r1, [r1, #0]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6911      	ldr	r1, [r2, #16]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68d2      	ldr	r2, [r2, #12]
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	000186a0 	.word	0x000186a0
 800284c:	001e847f 	.word	0x001e847f
 8002850:	003d08ff 	.word	0x003d08ff
 8002854:	431bde83 	.word	0x431bde83
 8002858:	10624dd3 	.word	0x10624dd3

0800285c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	2b80      	cmp	r3, #128	; 0x80
 8002870:	d103      	bne.n	800287a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	461a      	mov	r2, r3
 8002890:	460b      	mov	r3, r1
 8002892:	817b      	strh	r3, [r7, #10]
 8002894:	4613      	mov	r3, r2
 8002896:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff faec 	bl	8001e74 <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	f040 80e0 	bne.w	8002a6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2319      	movs	r3, #25
 80028b2:	2201      	movs	r2, #1
 80028b4:	4970      	ldr	r1, [pc, #448]	; (8002a78 <HAL_I2C_Master_Transmit+0x1f4>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f001 fe12 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	e0d3      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_I2C_Master_Transmit+0x50>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e0cc      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d007      	beq.n	80028fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2221      	movs	r2, #33	; 0x21
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2210      	movs	r2, #16
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a50      	ldr	r2, [pc, #320]	; (8002a7c <HAL_I2C_Master_Transmit+0x1f8>)
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800293c:	8979      	ldrh	r1, [r7, #10]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	6a3a      	ldr	r2, [r7, #32]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f001 fca2 	bl	800428c <I2C_MasterRequestWrite>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e08d      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002968:	e066      	b.n	8002a38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	6a39      	ldr	r1, [r7, #32]
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f001 fed0 	bl	8004714 <I2C_WaitOnTXEFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b04      	cmp	r3, #4
 8002980:	d107      	bne.n	8002992 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06b      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d11b      	bne.n	8002a0c <HAL_I2C_Master_Transmit+0x188>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d017      	beq.n	8002a0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	6a39      	ldr	r1, [r7, #32]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f001 fec7 	bl	80047a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d107      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e01a      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d194      	bne.n	800296a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	00100002 	.word	0x00100002
 8002a7c:	ffff0000 	.word	0xffff0000

08002a80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d003      	beq.n	8002ab8 <HAL_I2C_EV_IRQHandler+0x38>
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	f040 80c1 	bne.w	8002c3a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <HAL_I2C_EV_IRQHandler+0x6e>
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ad8:	d003      	beq.n	8002ae2 <HAL_I2C_EV_IRQHandler+0x62>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x66>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x68>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	f000 8132 	beq.w	8002d52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00c      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x92>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0a5b      	lsrs	r3, r3, #9
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f001 fef5 	bl	80048f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fd99 	bl	8003642 <I2C_Master_SB>
 8002b10:	e092      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	0a5b      	lsrs	r3, r3, #9
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fe0e 	bl	800374c <I2C_Master_ADD10>
 8002b30:	e082      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_I2C_EV_IRQHandler+0xd2>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fe27 	bl	800379e <I2C_Master_ADDR>
 8002b50:	e072      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03b      	beq.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6c:	f000 80f3 	beq.w	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	09db      	lsrs	r3, r3, #7
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00f      	beq.n	8002b9c <HAL_I2C_EV_IRQHandler+0x11c>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	0a9b      	lsrs	r3, r3, #10
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d009      	beq.n	8002b9c <HAL_I2C_EV_IRQHandler+0x11c>
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f9f1 	bl	8002f7c <I2C_MasterTransmit_TXE>
 8002b9a:	e04d      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80d6 	beq.w	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	0a5b      	lsrs	r3, r3, #9
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80cf 	beq.w	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002bb8:	7bbb      	ldrb	r3, [r7, #14]
 8002bba:	2b21      	cmp	r3, #33	; 0x21
 8002bbc:	d103      	bne.n	8002bc6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa78 	bl	80030b4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc4:	e0c7      	b.n	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	f040 80c4 	bne.w	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fae6 	bl	80031a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd4:	e0bf      	b.n	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be4:	f000 80b7 	beq.w	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00f      	beq.n	8002c14 <HAL_I2C_EV_IRQHandler+0x194>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <HAL_I2C_EV_IRQHandler+0x194>
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fb5f 	bl	80032d0 <I2C_MasterReceive_RXNE>
 8002c12:	e011      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 809a 	beq.w	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8093 	beq.w	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fc15 	bl	8003460 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c36:	e08e      	b.n	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c38:	e08d      	b.n	8002d56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e007      	b.n	8002c5c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x20e>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	0a5b      	lsrs	r3, r3, #9
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00c      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c84:	69b9      	ldr	r1, [r7, #24]
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 ffe0 	bl	8003c4c <I2C_Slave_ADDR>
 8002c8c:	e066      	b.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <HAL_I2C_EV_IRQHandler+0x22e>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	0a5b      	lsrs	r3, r3, #9
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f001 f81a 	bl	8003ce0 <I2C_Slave_STOPF>
 8002cac:	e056      	b.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cae:	7bbb      	ldrb	r3, [r7, #14]
 8002cb0:	2b21      	cmp	r3, #33	; 0x21
 8002cb2:	d002      	beq.n	8002cba <HAL_I2C_EV_IRQHandler+0x23a>
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	2b29      	cmp	r3, #41	; 0x29
 8002cb8:	d125      	bne.n	8002d06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	09db      	lsrs	r3, r3, #7
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00f      	beq.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x266>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	0a9b      	lsrs	r3, r3, #10
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x266>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fef8 	bl	8003ad4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ce4:	e039      	b.n	8002d5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d033      	beq.n	8002d5a <HAL_I2C_EV_IRQHandler+0x2da>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	0a5b      	lsrs	r3, r3, #9
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d02d      	beq.n	8002d5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 ff25 	bl	8003b4e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d04:	e029      	b.n	8002d5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00f      	beq.n	8002d32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	0a9b      	lsrs	r3, r3, #10
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 ff2f 	bl	8003b8e <I2C_SlaveReceive_RXNE>
 8002d30:	e014      	b.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00e      	beq.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	0a5b      	lsrs	r3, r3, #9
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 ff5d 	bl	8003c0a <I2C_SlaveReceive_BTF>
 8002d50:	e004      	b.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002d52:	bf00      	nop
 8002d54:	e002      	b.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08a      	sub	sp, #40	; 0x28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d84:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_I2C_ER_IRQHandler+0x5e>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dae:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	0a5b      	lsrs	r3, r3, #9
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00e      	beq.n	8002dea <HAL_I2C_ER_IRQHandler+0x88>
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002de8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	0a9b      	lsrs	r3, r3, #10
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d03f      	beq.n	8002e76 <HAL_I2C_ER_IRQHandler+0x114>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d039      	beq.n	8002e76 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002e02:	7efb      	ldrb	r3, [r7, #27]
 8002e04:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002e1c:	7ebb      	ldrb	r3, [r7, #26]
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d112      	bne.n	8002e48 <HAL_I2C_ER_IRQHandler+0xe6>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10f      	bne.n	8002e48 <HAL_I2C_ER_IRQHandler+0xe6>
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	2b21      	cmp	r3, #33	; 0x21
 8002e2c:	d008      	beq.n	8002e40 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b29      	cmp	r3, #41	; 0x29
 8002e32:	d005      	beq.n	8002e40 <HAL_I2C_ER_IRQHandler+0xde>
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	2b28      	cmp	r3, #40	; 0x28
 8002e38:	d106      	bne.n	8002e48 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b21      	cmp	r3, #33	; 0x21
 8002e3e:	d103      	bne.n	8002e48 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f001 f87d 	bl	8003f40 <I2C_Slave_AF>
 8002e46:	e016      	b.n	8002e76 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e50:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e5a:	7efb      	ldrb	r3, [r7, #27]
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d002      	beq.n	8002e66 <HAL_I2C_ER_IRQHandler+0x104>
 8002e60:	7efb      	ldrb	r3, [r7, #27]
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d107      	bne.n	8002e76 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e74:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	0adb      	lsrs	r3, r3, #11
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00e      	beq.n	8002ea0 <HAL_I2C_ER_IRQHandler+0x13e>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002e9e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f001 f8b8 	bl	8004028 <I2C_ITError>
  }
}
 8002eb8:	bf00      	nop
 8002eba:	3728      	adds	r7, #40	; 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
 8002f14:	4613      	mov	r3, r2
 8002f16:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d150      	bne.n	8003044 <I2C_MasterTransmit_TXE+0xc8>
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b21      	cmp	r3, #33	; 0x21
 8002fa6:	d14d      	bne.n	8003044 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d01d      	beq.n	8002fea <I2C_MasterTransmit_TXE+0x6e>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d01a      	beq.n	8002fea <I2C_MasterTransmit_TXE+0x6e>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fba:	d016      	beq.n	8002fea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2211      	movs	r2, #17
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff ff6c 	bl	8002ec0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fe8:	e060      	b.n	80030ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ff8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003008:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d107      	bne.n	8003034 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff81 	bl	8002f34 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003032:	e03b      	b.n	80030ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff3f 	bl	8002ec0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003042:	e033      	b.n	80030ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b21      	cmp	r3, #33	; 0x21
 8003048:	d005      	beq.n	8003056 <I2C_MasterTransmit_TXE+0xda>
 800304a:	7bbb      	ldrb	r3, [r7, #14]
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d12d      	bne.n	80030ac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b22      	cmp	r3, #34	; 0x22
 8003054:	d12a      	bne.n	80030ac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d108      	bne.n	8003072 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003070:	e01c      	b.n	80030ac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d103      	bne.n	8003086 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f88e 	bl	80031a0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003084:	e012      	b.n	80030ac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030aa:	e7ff      	b.n	80030ac <I2C_MasterTransmit_TXE+0x130>
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b21      	cmp	r3, #33	; 0x21
 80030cc:	d164      	bne.n	8003198 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80030fc:	e04c      	b.n	8003198 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d01d      	beq.n	8003140 <I2C_MasterTransmit_BTF+0x8c>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b20      	cmp	r3, #32
 8003108:	d01a      	beq.n	8003140 <I2C_MasterTransmit_BTF+0x8c>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003110:	d016      	beq.n	8003140 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003120:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2211      	movs	r2, #17
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fec1 	bl	8002ec0 <HAL_I2C_MasterTxCpltCallback>
}
 800313e:	e02b      	b.n	8003198 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800314e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d107      	bne.n	800318a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fed6 	bl	8002f34 <HAL_I2C_MemTxCpltCallback>
}
 8003188:	e006      	b.n	8003198 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fe94 	bl	8002ec0 <HAL_I2C_MasterTxCpltCallback>
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11d      	bne.n	80031f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10b      	bne.n	80031d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80031d6:	e077      	b.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031dc:	b29b      	uxth	r3, r3
 80031de:	121b      	asrs	r3, r3, #8
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031f2:	e069      	b.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d10b      	bne.n	8003214 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	b2da      	uxtb	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003212:	e059      	b.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003218:	2b02      	cmp	r3, #2
 800321a:	d152      	bne.n	80032c2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b22      	cmp	r3, #34	; 0x22
 8003220:	d10d      	bne.n	800323e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003230:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800323c:	e044      	b.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b21      	cmp	r3, #33	; 0x21
 800324c:	d112      	bne.n	8003274 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	781a      	ldrb	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003272:	e029      	b.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d124      	bne.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	2b21      	cmp	r3, #33	; 0x21
 8003282:	d121      	bne.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003292:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fe3a 	bl	8002f34 <HAL_I2C_MemTxCpltCallback>
}
 80032c0:	e002      	b.n	80032c8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff faca 	bl	800285c <I2C_Flush_DR>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b22      	cmp	r3, #34	; 0x22
 80032e2:	f040 80b9 	bne.w	8003458 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d921      	bls.n	800333e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b03      	cmp	r3, #3
 8003328:	f040 8096 	bne.w	8003458 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800333c:	e08c      	b.n	8003458 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	2b02      	cmp	r3, #2
 8003344:	d07f      	beq.n	8003446 <I2C_MasterReceive_RXNE+0x176>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d002      	beq.n	8003352 <I2C_MasterReceive_RXNE+0x82>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d179      	bne.n	8003446 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 fa6e 	bl	8004834 <I2C_WaitOnSTOPRequestThroughIT>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d14c      	bne.n	80033f8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800337c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d10a      	bne.n	80033ce <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff fdbd 	bl	8002f46 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033cc:	e044      	b.n	8003458 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d002      	beq.n	80033e2 <I2C_MasterReceive_RXNE+0x112>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b20      	cmp	r3, #32
 80033e0:	d103      	bne.n	80033ea <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
 80033e8:	e002      	b.n	80033f0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2212      	movs	r2, #18
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fd6e 	bl	8002ed2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033f6:	e02f      	b.n	8003458 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003406:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fd8a 	bl	8002f58 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003444:	e008      	b.n	8003458 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003454:	605a      	str	r2, [r3, #4]
}
 8003456:	e7ff      	b.n	8003458 <I2C_MasterReceive_RXNE+0x188>
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b04      	cmp	r3, #4
 8003476:	d11b      	bne.n	80034b0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003486:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80034ae:	e0c4      	b.n	800363a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d129      	bne.n	800350e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d00a      	beq.n	80034e6 <I2C_MasterReceive_BTF+0x86>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d007      	beq.n	80034e6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800350c:	e095      	b.n	800363a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d17d      	bne.n	8003614 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d002      	beq.n	8003524 <I2C_MasterReceive_BTF+0xc4>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b10      	cmp	r3, #16
 8003522:	d108      	bne.n	8003536 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e016      	b.n	8003564 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d002      	beq.n	8003542 <I2C_MasterReceive_BTF+0xe2>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d108      	bne.n	8003554 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e007      	b.n	8003564 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d10a      	bne.n	80035ea <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fcaf 	bl	8002f46 <HAL_I2C_MemRxCpltCallback>
}
 80035e8:	e027      	b.n	800363a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d002      	beq.n	80035fe <I2C_MasterReceive_BTF+0x19e>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d103      	bne.n	8003606 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
 8003604:	e002      	b.n	800360c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2212      	movs	r2, #18
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff fc60 	bl	8002ed2 <HAL_I2C_MasterRxCpltCallback>
}
 8003612:	e012      	b.n	800363a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d117      	bne.n	8003686 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800366e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003670:	e067      	b.n	8003742 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	611a      	str	r2, [r3, #16]
}
 8003684:	e05d      	b.n	8003742 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800368e:	d133      	bne.n	80036f8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b21      	cmp	r3, #33	; 0x21
 800369a:	d109      	bne.n	80036b0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036ac:	611a      	str	r2, [r3, #16]
 80036ae:	e008      	b.n	80036c2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <I2C_Master_SB+0x92>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d108      	bne.n	80036e6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d032      	beq.n	8003742 <I2C_Master_SB+0x100>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d02d      	beq.n	8003742 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f4:	605a      	str	r2, [r3, #4]
}
 80036f6:	e024      	b.n	8003742 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10e      	bne.n	800371e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	b29b      	uxth	r3, r3
 8003706:	11db      	asrs	r3, r3, #7
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 0306 	and.w	r3, r3, #6
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f063 030f 	orn	r3, r3, #15
 8003714:	b2da      	uxtb	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]
}
 800371c:	e011      	b.n	8003742 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	2b01      	cmp	r3, #1
 8003724:	d10d      	bne.n	8003742 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	b29b      	uxth	r3, r3
 800372c:	11db      	asrs	r3, r3, #7
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 0306 	and.w	r3, r3, #6
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f063 030e 	orn	r3, r3, #14
 800373a:	b2da      	uxtb	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	b2da      	uxtb	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <I2C_Master_ADD10+0x26>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <I2C_Master_ADD10+0x48>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	605a      	str	r2, [r3, #4]
  }
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800379e:	b480      	push	{r7}
 80037a0:	b091      	sub	sp, #68	; 0x44
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b22      	cmp	r3, #34	; 0x22
 80037c6:	f040 8174 	bne.w	8003ab2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <I2C_Master_ADDR+0x54>
 80037d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d10b      	bne.n	80037f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037da:	2300      	movs	r3, #0
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	e16b      	b.n	8003aca <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11d      	bne.n	8003836 <I2C_Master_ADDR+0x98>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003802:	d118      	bne.n	8003836 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003828:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	651a      	str	r2, [r3, #80]	; 0x50
 8003834:	e149      	b.n	8003aca <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d113      	bne.n	8003868 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003840:	2300      	movs	r3, #0
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e120      	b.n	8003aaa <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	f040 808a 	bne.w	8003988 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800387a:	d137      	bne.n	80038ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389a:	d113      	bne.n	80038c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	e0f2      	b.n	8003aaa <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e0de      	b.n	8003aaa <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d02e      	beq.n	8003950 <I2C_Master_ADDR+0x1b2>
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d02b      	beq.n	8003950 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	2b12      	cmp	r3, #18
 80038fc:	d102      	bne.n	8003904 <I2C_Master_ADDR+0x166>
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	2b01      	cmp	r3, #1
 8003902:	d125      	bne.n	8003950 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	2b04      	cmp	r3, #4
 8003908:	d00e      	beq.n	8003928 <I2C_Master_ADDR+0x18a>
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	2b02      	cmp	r3, #2
 800390e:	d00b      	beq.n	8003928 <I2C_Master_ADDR+0x18a>
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	2b10      	cmp	r3, #16
 8003914:	d008      	beq.n	8003928 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e007      	b.n	8003938 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003936:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	e0ac      	b.n	8003aaa <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e090      	b.n	8003aaa <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d158      	bne.n	8003a44 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	2b04      	cmp	r3, #4
 8003996:	d021      	beq.n	80039dc <I2C_Master_ADDR+0x23e>
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	2b02      	cmp	r3, #2
 800399c:	d01e      	beq.n	80039dc <I2C_Master_ADDR+0x23e>
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d01b      	beq.n	80039dc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e012      	b.n	8003a02 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a10:	d14b      	bne.n	8003aaa <I2C_Master_ADDR+0x30c>
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a18:	d00b      	beq.n	8003a32 <I2C_Master_ADDR+0x294>
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d008      	beq.n	8003a32 <I2C_Master_ADDR+0x294>
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d005      	beq.n	8003a32 <I2C_Master_ADDR+0x294>
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d002      	beq.n	8003a32 <I2C_Master_ADDR+0x294>
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d13b      	bne.n	8003aaa <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	e032      	b.n	8003aaa <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a52:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a62:	d117      	bne.n	8003a94 <I2C_Master_ADDR+0x2f6>
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6a:	d00b      	beq.n	8003a84 <I2C_Master_ADDR+0x2e6>
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d008      	beq.n	8003a84 <I2C_Master_ADDR+0x2e6>
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d005      	beq.n	8003a84 <I2C_Master_ADDR+0x2e6>
 8003a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7a:	2b10      	cmp	r3, #16
 8003a7c:	d002      	beq.n	8003a84 <I2C_Master_ADDR+0x2e6>
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d107      	bne.n	8003a94 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a92:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ab0:	e00b      	b.n	8003aca <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
}
 8003ac8:	e7ff      	b.n	8003aca <I2C_Master_ADDR+0x32c>
 8003aca:	bf00      	nop
 8003acc:	3744      	adds	r7, #68	; 0x44
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02b      	beq.n	8003b46 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d114      	bne.n	8003b46 <I2C_SlaveTransmit_TXE+0x72>
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b29      	cmp	r3, #41	; 0x29
 8003b20:	d111      	bne.n	8003b46 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2221      	movs	r2, #33	; 0x21
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2228      	movs	r2, #40	; 0x28
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff f9cf 	bl	8002ee4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d011      	beq.n	8003b84 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	781a      	ldrb	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02c      	beq.n	8003c02 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d114      	bne.n	8003c02 <I2C_SlaveReceive_RXNE+0x74>
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b2a      	cmp	r3, #42	; 0x2a
 8003bdc:	d111      	bne.n	8003c02 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2222      	movs	r2, #34	; 0x22
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2228      	movs	r2, #40	; 0x28
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff f97a 	bl	8002ef6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d012      	beq.n	8003c42 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c66:	2b28      	cmp	r3, #40	; 0x28
 8003c68:	d127      	bne.n	8003cba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	089b      	lsrs	r3, r3, #2
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	09db      	lsrs	r3, r3, #7
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	81bb      	strh	r3, [r7, #12]
 8003c9c:	e002      	b.n	8003ca4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003cac:	89ba      	ldrh	r2, [r7, #12]
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff f928 	bl	8002f08 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cb8:	e00e      	b.n	8003cd8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3c:	d172      	bne.n	8003e24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	2b22      	cmp	r3, #34	; 0x22
 8003d42:	d002      	beq.n	8003d4a <I2C_Slave_STOPF+0x6a>
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	2b2a      	cmp	r3, #42	; 0x2a
 8003d48:	d135      	bne.n	8003db6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0204 	orr.w	r2, r3, #4
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fa2a 	bl	80021dc <HAL_DMA_GetState>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d049      	beq.n	8003e22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4a69      	ldr	r2, [pc, #420]	; (8003f38 <I2C_Slave_STOPF+0x258>)
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f9a6 	bl	80020ec <HAL_DMA_Abort_IT>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d03d      	beq.n	8003e22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db0:	4610      	mov	r0, r2
 8003db2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003db4:	e035      	b.n	8003e22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe f9f4 	bl	80021dc <HAL_DMA_GetState>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d014      	beq.n	8003e24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	4a4e      	ldr	r2, [pc, #312]	; (8003f38 <I2C_Slave_STOPF+0x258>)
 8003e00:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe f970 	bl	80020ec <HAL_DMA_Abort_IT>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4798      	blx	r3
 8003e20:	e000      	b.n	8003e24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d03e      	beq.n	8003eac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d112      	bne.n	8003e62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d112      	bne.n	8003e96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0204 	orr.w	r2, r3, #4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8b7 	bl	8004028 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003eba:	e039      	b.n	8003f30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec0:	d109      	bne.n	8003ed6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2228      	movs	r2, #40	; 0x28
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff f810 	bl	8002ef6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b28      	cmp	r3, #40	; 0x28
 8003ee0:	d111      	bne.n	8003f06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <I2C_Slave_STOPF+0x25c>)
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff f80f 	bl	8002f22 <HAL_I2C_ListenCpltCallback>
}
 8003f04:	e014      	b.n	8003f30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	2b22      	cmp	r3, #34	; 0x22
 8003f0c:	d002      	beq.n	8003f14 <I2C_Slave_STOPF+0x234>
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b22      	cmp	r3, #34	; 0x22
 8003f12:	d10d      	bne.n	8003f30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe ffe3 	bl	8002ef6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	08004391 	.word	0x08004391
 8003f3c:	ffff0000 	.word	0xffff0000

08003f40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d002      	beq.n	8003f62 <I2C_Slave_AF+0x22>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d129      	bne.n	8003fb6 <I2C_Slave_AF+0x76>
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b28      	cmp	r3, #40	; 0x28
 8003f66:	d126      	bne.n	8003fb6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a2e      	ldr	r2, [pc, #184]	; (8004024 <I2C_Slave_AF+0xe4>)
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe ffb7 	bl	8002f22 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003fb4:	e031      	b.n	800401a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b21      	cmp	r3, #33	; 0x21
 8003fba:	d129      	bne.n	8004010 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a19      	ldr	r2, [pc, #100]	; (8004024 <I2C_Slave_AF+0xe4>)
 8003fc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2221      	movs	r2, #33	; 0x21
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fe6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ff0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004000:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fe fc2a 	bl	800285c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7fe ff6b 	bl	8002ee4 <HAL_I2C_SlaveTxCpltCallback>
}
 800400e:	e004      	b.n	800401a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004018:	615a      	str	r2, [r3, #20]
}
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	ffff0000 	.word	0xffff0000

08004028 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800403e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004040:	7bbb      	ldrb	r3, [r7, #14]
 8004042:	2b10      	cmp	r3, #16
 8004044:	d002      	beq.n	800404c <I2C_ITError+0x24>
 8004046:	7bbb      	ldrb	r3, [r7, #14]
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d10a      	bne.n	8004062 <I2C_ITError+0x3a>
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b22      	cmp	r3, #34	; 0x22
 8004050:	d107      	bne.n	8004062 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004060:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004068:	2b28      	cmp	r3, #40	; 0x28
 800406a:	d107      	bne.n	800407c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2228      	movs	r2, #40	; 0x28
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800407a:	e015      	b.n	80040a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d00a      	beq.n	80040a2 <I2C_ITError+0x7a>
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b60      	cmp	r3, #96	; 0x60
 8004090:	d007      	beq.n	80040a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b6:	d162      	bne.n	800417e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d020      	beq.n	8004118 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	4a6a      	ldr	r2, [pc, #424]	; (8004284 <I2C_ITError+0x25c>)
 80040dc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe f802 	bl	80020ec <HAL_DMA_Abort_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8089 	beq.w	8004202 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004112:	4610      	mov	r0, r2
 8004114:	4798      	blx	r3
 8004116:	e074      	b.n	8004202 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	4a59      	ldr	r2, [pc, #356]	; (8004284 <I2C_ITError+0x25c>)
 800411e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd ffe1 	bl	80020ec <HAL_DMA_Abort_IT>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d068      	beq.n	8004202 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d10b      	bne.n	8004156 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004178:	4610      	mov	r0, r2
 800417a:	4798      	blx	r3
 800417c:	e041      	b.n	8004202 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b60      	cmp	r3, #96	; 0x60
 8004188:	d125      	bne.n	80041d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d10b      	bne.n	80041be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe fecb 	bl	8002f6a <HAL_I2C_AbortCpltCallback>
 80041d4:	e015      	b.n	8004202 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d10b      	bne.n	80041fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7fe feab 	bl	8002f58 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10e      	bne.n	8004230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800423e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b04      	cmp	r3, #4
 8004252:	d113      	bne.n	800427c <I2C_ITError+0x254>
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b28      	cmp	r3, #40	; 0x28
 8004258:	d110      	bne.n	800427c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <I2C_ITError+0x260>)
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fe fe53 	bl	8002f22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	08004391 	.word	0x08004391
 8004288:	ffff0000 	.word	0xffff0000

0800428c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	460b      	mov	r3, r1
 800429a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d006      	beq.n	80042b6 <I2C_MasterRequestWrite+0x2a>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d003      	beq.n	80042b6 <I2C_MasterRequestWrite+0x2a>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b4:	d108      	bne.n	80042c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e00b      	b.n	80042e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	2b12      	cmp	r3, #18
 80042ce:	d107      	bne.n	80042e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f8f7 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	d103      	bne.n	8004310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e035      	b.n	8004380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431c:	d108      	bne.n	8004330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800432c:	611a      	str	r2, [r3, #16]
 800432e:	e01b      	b.n	8004368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004330:	897b      	ldrh	r3, [r7, #10]
 8004332:	11db      	asrs	r3, r3, #7
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f003 0306 	and.w	r3, r3, #6
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f063 030f 	orn	r3, r3, #15
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <I2C_MasterRequestWrite+0xfc>)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f940 	bl	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e010      	b.n	8004380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800435e:	897b      	ldrh	r3, [r7, #10]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4907      	ldr	r1, [pc, #28]	; (800438c <I2C_MasterRequestWrite+0x100>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f930 	bl	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	00010008 	.word	0x00010008
 800438c:	00010002 	.word	0x00010002

08004390 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043aa:	4b4b      	ldr	r3, [pc, #300]	; (80044d8 <I2C_DMAAbort+0x148>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	08db      	lsrs	r3, r3, #3
 80043b0:	4a4a      	ldr	r2, [pc, #296]	; (80044dc <I2C_DMAAbort+0x14c>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	0a1a      	lsrs	r2, r3, #8
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00da      	lsls	r2, r3, #3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80043d6:	e00a      	b.n	80043ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b01      	subs	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d0ea      	beq.n	80043c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	2200      	movs	r2, #0
 80043fc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	2200      	movs	r2, #0
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004430:	2200      	movs	r2, #0
 8004432:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	2200      	movs	r2, #0
 8004442:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b60      	cmp	r3, #96	; 0x60
 800445e:	d10e      	bne.n	800447e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2200      	movs	r2, #0
 8004474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7fe fd77 	bl	8002f6a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800447c:	e027      	b.n	80044ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800447e:	7cfb      	ldrb	r3, [r7, #19]
 8004480:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004484:	2b28      	cmp	r3, #40	; 0x28
 8004486:	d117      	bne.n	80044b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2228      	movs	r2, #40	; 0x28
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044b6:	e007      	b.n	80044c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80044c8:	6978      	ldr	r0, [r7, #20]
 80044ca:	f7fe fd45 	bl	8002f58 <HAL_I2C_ErrorCallback>
}
 80044ce:	bf00      	nop
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000060 	.word	0x20000060
 80044dc:	14f8b589 	.word	0x14f8b589

080044e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f0:	e048      	b.n	8004584 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d044      	beq.n	8004584 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fd fcbb 	bl	8001e74 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d139      	bne.n	8004584 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	0c1b      	lsrs	r3, r3, #16
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10d      	bne.n	8004536 <I2C_WaitOnFlagUntilTimeout+0x56>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	43da      	mvns	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4013      	ands	r3, r2
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	e00c      	b.n	8004550 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	43da      	mvns	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	429a      	cmp	r2, r3
 8004554:	d116      	bne.n	8004584 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e023      	b.n	80045cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10d      	bne.n	80045aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	43da      	mvns	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	e00c      	b.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	43da      	mvns	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4013      	ands	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d093      	beq.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045e2:	e071      	b.n	80046c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f2:	d123      	bne.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800460c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f043 0204 	orr.w	r2, r3, #4
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e067      	b.n	800470c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d041      	beq.n	80046c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004644:	f7fd fc16 	bl	8001e74 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d302      	bcc.n	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d136      	bne.n	80046c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10c      	bne.n	800467e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	43da      	mvns	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf14      	ite	ne
 8004676:	2301      	movne	r3, #1
 8004678:	2300      	moveq	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	e00b      	b.n	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	43da      	mvns	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f043 0220 	orr.w	r2, r3, #32
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e021      	b.n	800470c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10c      	bne.n	80046ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	43da      	mvns	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e00b      	b.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	f47f af6d 	bne.w	80045e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004720:	e034      	b.n	800478c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f8b8 	bl	8004898 <I2C_IsAcknowledgeFailed>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e034      	b.n	800479c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d028      	beq.n	800478c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7fd fb9b 	bl	8001e74 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11d      	bne.n	800478c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b80      	cmp	r3, #128	; 0x80
 800475c:	d016      	beq.n	800478c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e007      	b.n	800479c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d1c3      	bne.n	8004722 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047b0:	e034      	b.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f870 	bl	8004898 <I2C_IsAcknowledgeFailed>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e034      	b.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d028      	beq.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fd fb53 	bl	8001e74 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11d      	bne.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d016      	beq.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d1c3      	bne.n	80047b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	08db      	lsrs	r3, r3, #3
 8004846:	4a13      	ldr	r2, [pc, #76]	; (8004894 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	0a1a      	lsrs	r2, r3, #8
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b01      	subs	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f043 0220 	orr.w	r2, r3, #32
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e008      	b.n	8004884 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004880:	d0e9      	beq.n	8004856 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000060 	.word	0x20000060
 8004894:	14f8b589 	.word	0x14f8b589

08004898 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ae:	d11b      	bne.n	80048e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	f043 0204 	orr.w	r2, r3, #4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004904:	d103      	bne.n	800490e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800490c:	e007      	b.n	800491e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004916:	d102      	bne.n	800491e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2208      	movs	r2, #8
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e26c      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8087 	beq.w	8004a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004948:	4b92      	ldr	r3, [pc, #584]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b04      	cmp	r3, #4
 8004952:	d00c      	beq.n	800496e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004954:	4b8f      	ldr	r3, [pc, #572]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b08      	cmp	r3, #8
 800495e:	d112      	bne.n	8004986 <HAL_RCC_OscConfig+0x5e>
 8004960:	4b8c      	ldr	r3, [pc, #560]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496c:	d10b      	bne.n	8004986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496e:	4b89      	ldr	r3, [pc, #548]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d06c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x12c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d168      	bne.n	8004a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e246      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498e:	d106      	bne.n	800499e <HAL_RCC_OscConfig+0x76>
 8004990:	4b80      	ldr	r3, [pc, #512]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7f      	ldr	r2, [pc, #508]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e02e      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x98>
 80049a6:	4b7b      	ldr	r3, [pc, #492]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a7a      	ldr	r2, [pc, #488]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4b78      	ldr	r3, [pc, #480]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a77      	ldr	r2, [pc, #476]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e01d      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0xbc>
 80049ca:	4b72      	ldr	r3, [pc, #456]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a71      	ldr	r2, [pc, #452]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6e      	ldr	r2, [pc, #440]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 80049e4:	4b6b      	ldr	r3, [pc, #428]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a6a      	ldr	r2, [pc, #424]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b68      	ldr	r3, [pc, #416]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a67      	ldr	r2, [pc, #412]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d013      	beq.n	8004a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fd fa36 	bl	8001e74 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fd fa32 	bl	8001e74 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e1fa      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0xe4>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fd fa22 	bl	8001e74 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fd fa1e 	bl	8001e74 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e1e6      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a46:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x10c>
 8004a52:	e000      	b.n	8004a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d063      	beq.n	8004b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a62:	4b4c      	ldr	r3, [pc, #304]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a6e:	4b49      	ldr	r3, [pc, #292]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d11c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x18c>
 8004a7a:	4b46      	ldr	r3, [pc, #280]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d116      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a86:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_RCC_OscConfig+0x176>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e1ba      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4939      	ldr	r1, [pc, #228]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab2:	e03a      	b.n	8004b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <HAL_RCC_OscConfig+0x270>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7fd f9d7 	bl	8001e74 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aca:	f7fd f9d3 	bl	8001e74 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e19b      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4927      	ldr	r1, [pc, #156]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	e015      	b.n	8004b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afe:	4b26      	ldr	r3, [pc, #152]	; (8004b98 <HAL_RCC_OscConfig+0x270>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fd f9b6 	bl	8001e74 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7fd f9b2 	bl	8001e74 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e17a      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d03a      	beq.n	8004bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d019      	beq.n	8004b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3e:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <HAL_RCC_OscConfig+0x274>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b44:	f7fd f996 	bl	8001e74 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b4c:	f7fd f992 	bl	8001e74 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e15a      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f000 facc 	bl	8005108 <RCC_Delay>
 8004b70:	e01c      	b.n	8004bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <HAL_RCC_OscConfig+0x274>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b78:	f7fd f97c 	bl	8001e74 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7e:	e00f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b80:	f7fd f978 	bl	8001e74 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d908      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e140      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	42420000 	.word	0x42420000
 8004b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	4b9e      	ldr	r3, [pc, #632]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e9      	bne.n	8004b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a6 	beq.w	8004d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbe:	4b97      	ldr	r3, [pc, #604]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10d      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b94      	ldr	r3, [pc, #592]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4a93      	ldr	r2, [pc, #588]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	61d3      	str	r3, [r2, #28]
 8004bd6:	4b91      	ldr	r3, [pc, #580]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b8e      	ldr	r3, [pc, #568]	; (8004e20 <HAL_RCC_OscConfig+0x4f8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d118      	bne.n	8004c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf2:	4b8b      	ldr	r3, [pc, #556]	; (8004e20 <HAL_RCC_OscConfig+0x4f8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a8a      	ldr	r2, [pc, #552]	; (8004e20 <HAL_RCC_OscConfig+0x4f8>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7fd f939 	bl	8001e74 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7fd f935 	bl	8001e74 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b64      	cmp	r3, #100	; 0x64
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0fd      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b81      	ldr	r3, [pc, #516]	; (8004e20 <HAL_RCC_OscConfig+0x4f8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x312>
 8004c2c:	4b7b      	ldr	r3, [pc, #492]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4a7a      	ldr	r2, [pc, #488]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6213      	str	r3, [r2, #32]
 8004c38:	e02d      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x334>
 8004c42:	4b76      	ldr	r3, [pc, #472]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4a75      	ldr	r2, [pc, #468]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6213      	str	r3, [r2, #32]
 8004c4e:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	4a72      	ldr	r2, [pc, #456]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6213      	str	r3, [r2, #32]
 8004c5a:	e01c      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d10c      	bne.n	8004c7e <HAL_RCC_OscConfig+0x356>
 8004c64:	4b6d      	ldr	r3, [pc, #436]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	4a6c      	ldr	r2, [pc, #432]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c6a:	f043 0304 	orr.w	r3, r3, #4
 8004c6e:	6213      	str	r3, [r2, #32]
 8004c70:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	4a69      	ldr	r2, [pc, #420]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6213      	str	r3, [r2, #32]
 8004c7c:	e00b      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c7e:	4b67      	ldr	r3, [pc, #412]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4a66      	ldr	r2, [pc, #408]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6213      	str	r3, [r2, #32]
 8004c8a:	4b64      	ldr	r3, [pc, #400]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4a63      	ldr	r2, [pc, #396]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d015      	beq.n	8004cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7fd f8e9 	bl	8001e74 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fd f8e5 	bl	8001e74 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0ab      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	4b57      	ldr	r3, [pc, #348]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ee      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x37e>
 8004cc8:	e014      	b.n	8004cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cca:	f7fd f8d3 	bl	8001e74 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7fd f8cf 	bl	8001e74 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e095      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce8:	4b4c      	ldr	r3, [pc, #304]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ee      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfa:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4a47      	ldr	r2, [pc, #284]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8081 	beq.w	8004e12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d10:	4b42      	ldr	r3, [pc, #264]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d061      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d146      	bne.n	8004db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d24:	4b3f      	ldr	r3, [pc, #252]	; (8004e24 <HAL_RCC_OscConfig+0x4fc>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fd f8a3 	bl	8001e74 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fd f89f 	bl	8001e74 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e067      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d44:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d108      	bne.n	8004d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d5a:	4b30      	ldr	r3, [pc, #192]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	492d      	ldr	r1, [pc, #180]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d6c:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a19      	ldr	r1, [r3, #32]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	4927      	ldr	r1, [pc, #156]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d84:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <HAL_RCC_OscConfig+0x4fc>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8a:	f7fd f873 	bl	8001e74 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d92:	f7fd f86f 	bl	8001e74 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e037      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004da4:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x46a>
 8004db0:	e02f      	b.n	8004e12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <HAL_RCC_OscConfig+0x4fc>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db8:	f7fd f85c 	bl	8001e74 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd f858 	bl	8001e74 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e020      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x498>
 8004dde:	e018      	b.n	8004e12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e013      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_OscConfig+0x4f4>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40007000 	.word	0x40007000
 8004e24:	42420060 	.word	0x42420060

08004e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0d0      	b.n	8004fde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e3c:	4b6a      	ldr	r3, [pc, #424]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d910      	bls.n	8004e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	4b67      	ldr	r3, [pc, #412]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f023 0207 	bic.w	r2, r3, #7
 8004e52:	4965      	ldr	r1, [pc, #404]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b63      	ldr	r3, [pc, #396]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0b8      	b.n	8004fde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e84:	4b59      	ldr	r3, [pc, #356]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a58      	ldr	r2, [pc, #352]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004e8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e9c:	4b53      	ldr	r3, [pc, #332]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004ea2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ea6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea8:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	494d      	ldr	r1, [pc, #308]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d040      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d115      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e07f      	b.n	8004fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d107      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee6:	4b41      	ldr	r3, [pc, #260]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e073      	b.n	8004fde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef6:	4b3d      	ldr	r3, [pc, #244]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e06b      	b.n	8004fde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f06:	4b39      	ldr	r3, [pc, #228]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f023 0203 	bic.w	r2, r3, #3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4936      	ldr	r1, [pc, #216]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f18:	f7fc ffac 	bl	8001e74 <HAL_GetTick>
 8004f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f20:	f7fc ffa8 	bl	8001e74 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e053      	b.n	8004fde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f36:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 020c 	and.w	r2, r3, #12
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d1eb      	bne.n	8004f20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d210      	bcs.n	8004f78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 0207 	bic.w	r2, r3, #7
 8004f5e:	4922      	ldr	r1, [pc, #136]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e032      	b.n	8004fde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f84:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4916      	ldr	r1, [pc, #88]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	490e      	ldr	r1, [pc, #56]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fb6:	f000 f821 	bl	8004ffc <HAL_RCC_GetSysClockFreq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	490a      	ldr	r1, [pc, #40]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc8:	5ccb      	ldrb	r3, [r1, r3]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <HAL_RCC_ClockConfig+0x1cc>)
 8004fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_ClockConfig+0x1d0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fc ff0a 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40022000 	.word	0x40022000
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	08006454 	.word	0x08006454
 8004ff4:	20000060 	.word	0x20000060
 8004ff8:	20000068 	.word	0x20000068

08004ffc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <HAL_RCC_GetSysClockFreq+0x94>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b04      	cmp	r3, #4
 8005024:	d002      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0x30>
 8005026:	2b08      	cmp	r3, #8
 8005028:	d003      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0x36>
 800502a:	e027      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <HAL_RCC_GetSysClockFreq+0x98>)
 800502e:	613b      	str	r3, [r7, #16]
      break;
 8005030:	e027      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0c9b      	lsrs	r3, r3, #18
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	4a17      	ldr	r2, [pc, #92]	; (8005098 <HAL_RCC_GetSysClockFreq+0x9c>)
 800503c:	5cd3      	ldrb	r3, [r2, r3]
 800503e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800504a:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_RCC_GetSysClockFreq+0x94>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	0c5b      	lsrs	r3, r3, #17
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	4a11      	ldr	r2, [pc, #68]	; (800509c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005056:	5cd3      	ldrb	r3, [r2, r3]
 8005058:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a0d      	ldr	r2, [pc, #52]	; (8005094 <HAL_RCC_GetSysClockFreq+0x98>)
 800505e:	fb02 f203 	mul.w	r2, r2, r3
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e004      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a0c      	ldr	r2, [pc, #48]	; (80050a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	613b      	str	r3, [r7, #16]
      break;
 800507a:	e002      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCC_GetSysClockFreq+0x98>)
 800507e:	613b      	str	r3, [r7, #16]
      break;
 8005080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005082:	693b      	ldr	r3, [r7, #16]
}
 8005084:	4618      	mov	r0, r3
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	007a1200 	.word	0x007a1200
 8005098:	0800646c 	.word	0x0800646c
 800509c:	0800647c 	.word	0x0800647c
 80050a0:	003d0900 	.word	0x003d0900

080050a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a8:	4b02      	ldr	r3, [pc, #8]	; (80050b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80050aa:	681b      	ldr	r3, [r3, #0]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr
 80050b4:	20000060 	.word	0x20000060

080050b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050bc:	f7ff fff2 	bl	80050a4 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4903      	ldr	r1, [pc, #12]	; (80050dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40021000 	.word	0x40021000
 80050dc:	08006464 	.word	0x08006464

080050e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050e4:	f7ff ffde 	bl	80050a4 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	0adb      	lsrs	r3, r3, #11
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4903      	ldr	r1, [pc, #12]	; (8005104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40021000 	.word	0x40021000
 8005104:	08006464 	.word	0x08006464

08005108 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <RCC_Delay+0x34>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <RCC_Delay+0x38>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0a5b      	lsrs	r3, r3, #9
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005124:	bf00      	nop
  }
  while (Delay --);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1e5a      	subs	r2, r3, #1
 800512a:	60fa      	str	r2, [r7, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f9      	bne.n	8005124 <RCC_Delay+0x1c>
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr
 800513c:	20000060 	.word	0x20000060
 8005140:	10624dd3 	.word	0x10624dd3

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e041      	b.n	80051da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fc fac0 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 fa5c 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d001      	beq.n	80051fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e03a      	b.n	8005272 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a18      	ldr	r2, [pc, #96]	; (800527c <HAL_TIM_Base_Start_IT+0x98>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00e      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x58>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005226:	d009      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x58>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a14      	ldr	r2, [pc, #80]	; (8005280 <HAL_TIM_Base_Start_IT+0x9c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x58>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a13      	ldr	r2, [pc, #76]	; (8005284 <HAL_TIM_Base_Start_IT+0xa0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d111      	bne.n	8005260 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b06      	cmp	r3, #6
 800524c:	d010      	beq.n	8005270 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0201 	orr.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525e:	e007      	b.n	8005270 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800

08005288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d020      	beq.n	80052ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01b      	beq.n	80052ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0202 	mvn.w	r2, #2
 80052bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f998 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f98b 	bl	80055f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f99a 	bl	800561a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d020      	beq.n	8005338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01b      	beq.n	8005338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0204 	mvn.w	r2, #4
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f972 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f965 	bl	80055f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f974 	bl	800561a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d020      	beq.n	8005384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0208 	mvn.w	r2, #8
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2204      	movs	r2, #4
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f94c 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f93f 	bl	80055f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f94e 	bl	800561a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b00      	cmp	r3, #0
 800538c:	d020      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0210 	mvn.w	r2, #16
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2208      	movs	r2, #8
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f926 	bl	8005608 <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f919 	bl	80055f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f928 	bl	800561a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0201 	mvn.w	r2, #1
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fb ff38 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa7f 	bl	8005916 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00c      	beq.n	800543c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f8f8 	bl	800562c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00c      	beq.n	8005460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0220 	mvn.w	r2, #32
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa52 	bl	8005904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_TIM_ConfigClockSource+0x1c>
 8005480:	2302      	movs	r3, #2
 8005482:	e0b4      	b.n	80055ee <HAL_TIM_ConfigClockSource+0x186>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054bc:	d03e      	beq.n	800553c <HAL_TIM_ConfigClockSource+0xd4>
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c2:	f200 8087 	bhi.w	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	f000 8086 	beq.w	80055da <HAL_TIM_ConfigClockSource+0x172>
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d87f      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d01a      	beq.n	800550e <HAL_TIM_ConfigClockSource+0xa6>
 80054d8:	2b70      	cmp	r3, #112	; 0x70
 80054da:	d87b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d050      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x11a>
 80054e0:	2b60      	cmp	r3, #96	; 0x60
 80054e2:	d877      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d03c      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0xfa>
 80054e8:	2b50      	cmp	r3, #80	; 0x50
 80054ea:	d873      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d058      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x13a>
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d86f      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d064      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x15a>
 80054f8:	2b30      	cmp	r3, #48	; 0x30
 80054fa:	d86b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d060      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d867      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d05c      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005508:	2b10      	cmp	r3, #16
 800550a:	d05a      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x15a>
 800550c:	e062      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6899      	ldr	r1, [r3, #8]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f000 f974 	bl	800580a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	609a      	str	r2, [r3, #8]
      break;
 800553a:	e04f      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6899      	ldr	r1, [r3, #8]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f000 f95d 	bl	800580a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800555e:	609a      	str	r2, [r3, #8]
      break;
 8005560:	e03c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	461a      	mov	r2, r3
 8005570:	f000 f8d4 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2150      	movs	r1, #80	; 0x50
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f92b 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 8005580:	e02c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	461a      	mov	r2, r3
 8005590:	f000 f8f2 	bl	8005778 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2160      	movs	r1, #96	; 0x60
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f91b 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 80055a0:	e01c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 f8b4 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2140      	movs	r1, #64	; 0x40
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f90b 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 80055c0:	e00c      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f000 f902 	bl	80057d6 <TIM_ITRx_SetConfig>
      break;
 80055d2:	e003      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
      break;
 80055d8:	e000      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr

08005608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
	...

08005640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a2f      	ldr	r2, [pc, #188]	; (8005710 <TIM_Base_SetConfig+0xd0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_Base_SetConfig+0x30>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d007      	beq.n	8005670 <TIM_Base_SetConfig+0x30>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a2c      	ldr	r2, [pc, #176]	; (8005714 <TIM_Base_SetConfig+0xd4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_Base_SetConfig+0x30>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a2b      	ldr	r2, [pc, #172]	; (8005718 <TIM_Base_SetConfig+0xd8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a22      	ldr	r2, [pc, #136]	; (8005710 <TIM_Base_SetConfig+0xd0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00b      	beq.n	80056a2 <TIM_Base_SetConfig+0x62>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005690:	d007      	beq.n	80056a2 <TIM_Base_SetConfig+0x62>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <TIM_Base_SetConfig+0xd4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d003      	beq.n	80056a2 <TIM_Base_SetConfig+0x62>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <TIM_Base_SetConfig+0xd8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d108      	bne.n	80056b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a0d      	ldr	r2, [pc, #52]	; (8005710 <TIM_Base_SetConfig+0xd0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]
  }
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800

0800571c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 030a 	bic.w	r3, r3, #10
 8005758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f023 0210 	bic.w	r2, r3, #16
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	031b      	lsls	r3, r3, #12
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	621a      	str	r2, [r3, #32]
}
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f043 0307 	orr.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800580a:	b480      	push	{r7}
 800580c:	b087      	sub	sp, #28
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
 8005816:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005824:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	021a      	lsls	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	431a      	orrs	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4313      	orrs	r3, r2
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	609a      	str	r2, [r3, #8]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800585c:	2302      	movs	r3, #2
 800585e:	e046      	b.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d009      	beq.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a12      	ldr	r2, [pc, #72]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a10      	ldr	r2, [pc, #64]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d10c      	bne.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800

08005904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e042      	b.n	80059c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fb fef2 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2224      	movs	r2, #36	; 0x24
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800596a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f82b 	bl	80059c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a02:	f023 030c 	bic.w	r3, r3, #12
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2c      	ldr	r2, [pc, #176]	; (8005adc <UART_SetConfig+0x114>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d103      	bne.n	8005a38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7ff fb56 	bl	80050e0 <HAL_RCC_GetPCLK2Freq>
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	e002      	b.n	8005a3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a38:	f7ff fb3e 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8005a3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009a      	lsls	r2, r3, #2
 8005a48:	441a      	add	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	4a22      	ldr	r2, [pc, #136]	; (8005ae0 <UART_SetConfig+0x118>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	0119      	lsls	r1, r3, #4
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009a      	lsls	r2, r3, #2
 8005a68:	441a      	add	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <UART_SetConfig+0x118>)
 8005a76:	fba3 0302 	umull	r0, r3, r3, r2
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	2064      	movs	r0, #100	; 0x64
 8005a7e:	fb00 f303 	mul.w	r3, r0, r3
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	3332      	adds	r3, #50	; 0x32
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <UART_SetConfig+0x118>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a94:	4419      	add	r1, r3
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009a      	lsls	r2, r3, #2
 8005aa0:	441a      	add	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005aac:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <UART_SetConfig+0x118>)
 8005aae:	fba3 0302 	umull	r0, r3, r3, r2
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	2064      	movs	r0, #100	; 0x64
 8005ab6:	fb00 f303 	mul.w	r3, r0, r3
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	3332      	adds	r3, #50	; 0x32
 8005ac0:	4a07      	ldr	r2, [pc, #28]	; (8005ae0 <UART_SetConfig+0x118>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40013800 	.word	0x40013800
 8005ae0:	51eb851f 	.word	0x51eb851f

08005ae4 <__errno>:
 8005ae4:	4b01      	ldr	r3, [pc, #4]	; (8005aec <__errno+0x8>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000070 	.word	0x20000070

08005af0 <__libc_init_array>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	2600      	movs	r6, #0
 8005af4:	4d0c      	ldr	r5, [pc, #48]	; (8005b28 <__libc_init_array+0x38>)
 8005af6:	4c0d      	ldr	r4, [pc, #52]	; (8005b2c <__libc_init_array+0x3c>)
 8005af8:	1b64      	subs	r4, r4, r5
 8005afa:	10a4      	asrs	r4, r4, #2
 8005afc:	42a6      	cmp	r6, r4
 8005afe:	d109      	bne.n	8005b14 <__libc_init_array+0x24>
 8005b00:	f000 fc70 	bl	80063e4 <_init>
 8005b04:	2600      	movs	r6, #0
 8005b06:	4d0a      	ldr	r5, [pc, #40]	; (8005b30 <__libc_init_array+0x40>)
 8005b08:	4c0a      	ldr	r4, [pc, #40]	; (8005b34 <__libc_init_array+0x44>)
 8005b0a:	1b64      	subs	r4, r4, r5
 8005b0c:	10a4      	asrs	r4, r4, #2
 8005b0e:	42a6      	cmp	r6, r4
 8005b10:	d105      	bne.n	8005b1e <__libc_init_array+0x2e>
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b18:	4798      	blx	r3
 8005b1a:	3601      	adds	r6, #1
 8005b1c:	e7ee      	b.n	8005afc <__libc_init_array+0xc>
 8005b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b22:	4798      	blx	r3
 8005b24:	3601      	adds	r6, #1
 8005b26:	e7f2      	b.n	8005b0e <__libc_init_array+0x1e>
 8005b28:	080064b4 	.word	0x080064b4
 8005b2c:	080064b4 	.word	0x080064b4
 8005b30:	080064b4 	.word	0x080064b4
 8005b34:	080064b8 	.word	0x080064b8

08005b38 <memset>:
 8005b38:	4603      	mov	r3, r0
 8005b3a:	4402      	add	r2, r0
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d100      	bne.n	8005b42 <memset+0xa>
 8005b40:	4770      	bx	lr
 8005b42:	f803 1b01 	strb.w	r1, [r3], #1
 8005b46:	e7f9      	b.n	8005b3c <memset+0x4>

08005b48 <sniprintf>:
 8005b48:	b40c      	push	{r2, r3}
 8005b4a:	b530      	push	{r4, r5, lr}
 8005b4c:	4b17      	ldr	r3, [pc, #92]	; (8005bac <sniprintf+0x64>)
 8005b4e:	1e0c      	subs	r4, r1, #0
 8005b50:	681d      	ldr	r5, [r3, #0]
 8005b52:	b09d      	sub	sp, #116	; 0x74
 8005b54:	da08      	bge.n	8005b68 <sniprintf+0x20>
 8005b56:	238b      	movs	r3, #139	; 0x8b
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	b01d      	add	sp, #116	; 0x74
 8005b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b64:	b002      	add	sp, #8
 8005b66:	4770      	bx	lr
 8005b68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b70:	bf0c      	ite	eq
 8005b72:	4623      	moveq	r3, r4
 8005b74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	9307      	str	r3, [sp, #28]
 8005b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b80:	9002      	str	r0, [sp, #8]
 8005b82:	9006      	str	r0, [sp, #24]
 8005b84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b88:	4628      	mov	r0, r5
 8005b8a:	ab21      	add	r3, sp, #132	; 0x84
 8005b8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b8e:	a902      	add	r1, sp, #8
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	f000 f869 	bl	8005c68 <_svfiprintf_r>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	bfbc      	itt	lt
 8005b9a:	238b      	movlt	r3, #139	; 0x8b
 8005b9c:	602b      	strlt	r3, [r5, #0]
 8005b9e:	2c00      	cmp	r4, #0
 8005ba0:	d0dd      	beq.n	8005b5e <sniprintf+0x16>
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	e7d9      	b.n	8005b5e <sniprintf+0x16>
 8005baa:	bf00      	nop
 8005bac:	20000070 	.word	0x20000070

08005bb0 <__ssputs_r>:
 8005bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb4:	688e      	ldr	r6, [r1, #8]
 8005bb6:	4682      	mov	sl, r0
 8005bb8:	429e      	cmp	r6, r3
 8005bba:	460c      	mov	r4, r1
 8005bbc:	4690      	mov	r8, r2
 8005bbe:	461f      	mov	r7, r3
 8005bc0:	d838      	bhi.n	8005c34 <__ssputs_r+0x84>
 8005bc2:	898a      	ldrh	r2, [r1, #12]
 8005bc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bc8:	d032      	beq.n	8005c30 <__ssputs_r+0x80>
 8005bca:	6825      	ldr	r5, [r4, #0]
 8005bcc:	6909      	ldr	r1, [r1, #16]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	eba5 0901 	sub.w	r9, r5, r1
 8005bd4:	6965      	ldr	r5, [r4, #20]
 8005bd6:	444b      	add	r3, r9
 8005bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005be0:	106d      	asrs	r5, r5, #1
 8005be2:	429d      	cmp	r5, r3
 8005be4:	bf38      	it	cc
 8005be6:	461d      	movcc	r5, r3
 8005be8:	0553      	lsls	r3, r2, #21
 8005bea:	d531      	bpl.n	8005c50 <__ssputs_r+0xa0>
 8005bec:	4629      	mov	r1, r5
 8005bee:	f000 fb53 	bl	8006298 <_malloc_r>
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	b950      	cbnz	r0, 8005c0c <__ssputs_r+0x5c>
 8005bf6:	230c      	movs	r3, #12
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	f8ca 3000 	str.w	r3, [sl]
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0c:	464a      	mov	r2, r9
 8005c0e:	6921      	ldr	r1, [r4, #16]
 8005c10:	f000 face 	bl	80061b0 <memcpy>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	6126      	str	r6, [r4, #16]
 8005c22:	444e      	add	r6, r9
 8005c24:	6026      	str	r6, [r4, #0]
 8005c26:	463e      	mov	r6, r7
 8005c28:	6165      	str	r5, [r4, #20]
 8005c2a:	eba5 0509 	sub.w	r5, r5, r9
 8005c2e:	60a5      	str	r5, [r4, #8]
 8005c30:	42be      	cmp	r6, r7
 8005c32:	d900      	bls.n	8005c36 <__ssputs_r+0x86>
 8005c34:	463e      	mov	r6, r7
 8005c36:	4632      	mov	r2, r6
 8005c38:	4641      	mov	r1, r8
 8005c3a:	6820      	ldr	r0, [r4, #0]
 8005c3c:	f000 fac6 	bl	80061cc <memmove>
 8005c40:	68a3      	ldr	r3, [r4, #8]
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	1b9b      	subs	r3, r3, r6
 8005c46:	4432      	add	r2, r6
 8005c48:	2000      	movs	r0, #0
 8005c4a:	60a3      	str	r3, [r4, #8]
 8005c4c:	6022      	str	r2, [r4, #0]
 8005c4e:	e7db      	b.n	8005c08 <__ssputs_r+0x58>
 8005c50:	462a      	mov	r2, r5
 8005c52:	f000 fb7b 	bl	800634c <_realloc_r>
 8005c56:	4606      	mov	r6, r0
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d1e1      	bne.n	8005c20 <__ssputs_r+0x70>
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	6921      	ldr	r1, [r4, #16]
 8005c60:	f000 face 	bl	8006200 <_free_r>
 8005c64:	e7c7      	b.n	8005bf6 <__ssputs_r+0x46>
	...

08005c68 <_svfiprintf_r>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	4698      	mov	r8, r3
 8005c6e:	898b      	ldrh	r3, [r1, #12]
 8005c70:	4607      	mov	r7, r0
 8005c72:	061b      	lsls	r3, r3, #24
 8005c74:	460d      	mov	r5, r1
 8005c76:	4614      	mov	r4, r2
 8005c78:	b09d      	sub	sp, #116	; 0x74
 8005c7a:	d50e      	bpl.n	8005c9a <_svfiprintf_r+0x32>
 8005c7c:	690b      	ldr	r3, [r1, #16]
 8005c7e:	b963      	cbnz	r3, 8005c9a <_svfiprintf_r+0x32>
 8005c80:	2140      	movs	r1, #64	; 0x40
 8005c82:	f000 fb09 	bl	8006298 <_malloc_r>
 8005c86:	6028      	str	r0, [r5, #0]
 8005c88:	6128      	str	r0, [r5, #16]
 8005c8a:	b920      	cbnz	r0, 8005c96 <_svfiprintf_r+0x2e>
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e0d1      	b.n	8005e3a <_svfiprintf_r+0x1d2>
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	616b      	str	r3, [r5, #20]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ca4:	2330      	movs	r3, #48	; 0x30
 8005ca6:	f04f 0901 	mov.w	r9, #1
 8005caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e54 <_svfiprintf_r+0x1ec>
 8005cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	469a      	mov	sl, r3
 8005cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cbe:	b10a      	cbz	r2, 8005cc4 <_svfiprintf_r+0x5c>
 8005cc0:	2a25      	cmp	r2, #37	; 0x25
 8005cc2:	d1f9      	bne.n	8005cb8 <_svfiprintf_r+0x50>
 8005cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8005cc8:	d00b      	beq.n	8005ce2 <_svfiprintf_r+0x7a>
 8005cca:	465b      	mov	r3, fp
 8005ccc:	4622      	mov	r2, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f7ff ff6d 	bl	8005bb0 <__ssputs_r>
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f000 80aa 	beq.w	8005e30 <_svfiprintf_r+0x1c8>
 8005cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cde:	445a      	add	r2, fp
 8005ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 80a2 	beq.w	8005e30 <_svfiprintf_r+0x1c8>
 8005cec:	2300      	movs	r3, #0
 8005cee:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cf6:	f10a 0a01 	add.w	sl, sl, #1
 8005cfa:	9304      	str	r3, [sp, #16]
 8005cfc:	9307      	str	r3, [sp, #28]
 8005cfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d02:	931a      	str	r3, [sp, #104]	; 0x68
 8005d04:	4654      	mov	r4, sl
 8005d06:	2205      	movs	r2, #5
 8005d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0c:	4851      	ldr	r0, [pc, #324]	; (8005e54 <_svfiprintf_r+0x1ec>)
 8005d0e:	f000 fa41 	bl	8006194 <memchr>
 8005d12:	9a04      	ldr	r2, [sp, #16]
 8005d14:	b9d8      	cbnz	r0, 8005d4e <_svfiprintf_r+0xe6>
 8005d16:	06d0      	lsls	r0, r2, #27
 8005d18:	bf44      	itt	mi
 8005d1a:	2320      	movmi	r3, #32
 8005d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d20:	0711      	lsls	r1, r2, #28
 8005d22:	bf44      	itt	mi
 8005d24:	232b      	movmi	r3, #43	; 0x2b
 8005d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d30:	d015      	beq.n	8005d5e <_svfiprintf_r+0xf6>
 8005d32:	4654      	mov	r4, sl
 8005d34:	2000      	movs	r0, #0
 8005d36:	f04f 0c0a 	mov.w	ip, #10
 8005d3a:	9a07      	ldr	r2, [sp, #28]
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d42:	3b30      	subs	r3, #48	; 0x30
 8005d44:	2b09      	cmp	r3, #9
 8005d46:	d94e      	bls.n	8005de6 <_svfiprintf_r+0x17e>
 8005d48:	b1b0      	cbz	r0, 8005d78 <_svfiprintf_r+0x110>
 8005d4a:	9207      	str	r2, [sp, #28]
 8005d4c:	e014      	b.n	8005d78 <_svfiprintf_r+0x110>
 8005d4e:	eba0 0308 	sub.w	r3, r0, r8
 8005d52:	fa09 f303 	lsl.w	r3, r9, r3
 8005d56:	4313      	orrs	r3, r2
 8005d58:	46a2      	mov	sl, r4
 8005d5a:	9304      	str	r3, [sp, #16]
 8005d5c:	e7d2      	b.n	8005d04 <_svfiprintf_r+0x9c>
 8005d5e:	9b03      	ldr	r3, [sp, #12]
 8005d60:	1d19      	adds	r1, r3, #4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	9103      	str	r1, [sp, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	bfbb      	ittet	lt
 8005d6a:	425b      	neglt	r3, r3
 8005d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d70:	9307      	strge	r3, [sp, #28]
 8005d72:	9307      	strlt	r3, [sp, #28]
 8005d74:	bfb8      	it	lt
 8005d76:	9204      	strlt	r2, [sp, #16]
 8005d78:	7823      	ldrb	r3, [r4, #0]
 8005d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005d7c:	d10c      	bne.n	8005d98 <_svfiprintf_r+0x130>
 8005d7e:	7863      	ldrb	r3, [r4, #1]
 8005d80:	2b2a      	cmp	r3, #42	; 0x2a
 8005d82:	d135      	bne.n	8005df0 <_svfiprintf_r+0x188>
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	3402      	adds	r4, #2
 8005d88:	1d1a      	adds	r2, r3, #4
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	9203      	str	r2, [sp, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	bfb8      	it	lt
 8005d92:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d96:	9305      	str	r3, [sp, #20]
 8005d98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e64 <_svfiprintf_r+0x1fc>
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	4650      	mov	r0, sl
 8005da0:	7821      	ldrb	r1, [r4, #0]
 8005da2:	f000 f9f7 	bl	8006194 <memchr>
 8005da6:	b140      	cbz	r0, 8005dba <_svfiprintf_r+0x152>
 8005da8:	2340      	movs	r3, #64	; 0x40
 8005daa:	eba0 000a 	sub.w	r0, r0, sl
 8005dae:	fa03 f000 	lsl.w	r0, r3, r0
 8005db2:	9b04      	ldr	r3, [sp, #16]
 8005db4:	3401      	adds	r4, #1
 8005db6:	4303      	orrs	r3, r0
 8005db8:	9304      	str	r3, [sp, #16]
 8005dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dbe:	2206      	movs	r2, #6
 8005dc0:	4825      	ldr	r0, [pc, #148]	; (8005e58 <_svfiprintf_r+0x1f0>)
 8005dc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dc6:	f000 f9e5 	bl	8006194 <memchr>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d038      	beq.n	8005e40 <_svfiprintf_r+0x1d8>
 8005dce:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <_svfiprintf_r+0x1f4>)
 8005dd0:	bb1b      	cbnz	r3, 8005e1a <_svfiprintf_r+0x1b2>
 8005dd2:	9b03      	ldr	r3, [sp, #12]
 8005dd4:	3307      	adds	r3, #7
 8005dd6:	f023 0307 	bic.w	r3, r3, #7
 8005dda:	3308      	adds	r3, #8
 8005ddc:	9303      	str	r3, [sp, #12]
 8005dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005de0:	4433      	add	r3, r6
 8005de2:	9309      	str	r3, [sp, #36]	; 0x24
 8005de4:	e767      	b.n	8005cb6 <_svfiprintf_r+0x4e>
 8005de6:	460c      	mov	r4, r1
 8005de8:	2001      	movs	r0, #1
 8005dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dee:	e7a5      	b.n	8005d3c <_svfiprintf_r+0xd4>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f04f 0c0a 	mov.w	ip, #10
 8005df6:	4619      	mov	r1, r3
 8005df8:	3401      	adds	r4, #1
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e02:	3a30      	subs	r2, #48	; 0x30
 8005e04:	2a09      	cmp	r2, #9
 8005e06:	d903      	bls.n	8005e10 <_svfiprintf_r+0x1a8>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0c5      	beq.n	8005d98 <_svfiprintf_r+0x130>
 8005e0c:	9105      	str	r1, [sp, #20]
 8005e0e:	e7c3      	b.n	8005d98 <_svfiprintf_r+0x130>
 8005e10:	4604      	mov	r4, r0
 8005e12:	2301      	movs	r3, #1
 8005e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e18:	e7f0      	b.n	8005dfc <_svfiprintf_r+0x194>
 8005e1a:	ab03      	add	r3, sp, #12
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	462a      	mov	r2, r5
 8005e20:	4638      	mov	r0, r7
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <_svfiprintf_r+0x1f8>)
 8005e24:	a904      	add	r1, sp, #16
 8005e26:	f3af 8000 	nop.w
 8005e2a:	1c42      	adds	r2, r0, #1
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	d1d6      	bne.n	8005dde <_svfiprintf_r+0x176>
 8005e30:	89ab      	ldrh	r3, [r5, #12]
 8005e32:	065b      	lsls	r3, r3, #25
 8005e34:	f53f af2c 	bmi.w	8005c90 <_svfiprintf_r+0x28>
 8005e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e3a:	b01d      	add	sp, #116	; 0x74
 8005e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e40:	ab03      	add	r3, sp, #12
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	462a      	mov	r2, r5
 8005e46:	4638      	mov	r0, r7
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <_svfiprintf_r+0x1f8>)
 8005e4a:	a904      	add	r1, sp, #16
 8005e4c:	f000 f87c 	bl	8005f48 <_printf_i>
 8005e50:	e7eb      	b.n	8005e2a <_svfiprintf_r+0x1c2>
 8005e52:	bf00      	nop
 8005e54:	0800647e 	.word	0x0800647e
 8005e58:	08006488 	.word	0x08006488
 8005e5c:	00000000 	.word	0x00000000
 8005e60:	08005bb1 	.word	0x08005bb1
 8005e64:	08006484 	.word	0x08006484

08005e68 <_printf_common>:
 8005e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	4699      	mov	r9, r3
 8005e70:	688a      	ldr	r2, [r1, #8]
 8005e72:	690b      	ldr	r3, [r1, #16]
 8005e74:	4607      	mov	r7, r0
 8005e76:	4293      	cmp	r3, r2
 8005e78:	bfb8      	it	lt
 8005e7a:	4613      	movlt	r3, r2
 8005e7c:	6033      	str	r3, [r6, #0]
 8005e7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e82:	460c      	mov	r4, r1
 8005e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e88:	b10a      	cbz	r2, 8005e8e <_printf_common+0x26>
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	6033      	str	r3, [r6, #0]
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	0699      	lsls	r1, r3, #26
 8005e92:	bf42      	ittt	mi
 8005e94:	6833      	ldrmi	r3, [r6, #0]
 8005e96:	3302      	addmi	r3, #2
 8005e98:	6033      	strmi	r3, [r6, #0]
 8005e9a:	6825      	ldr	r5, [r4, #0]
 8005e9c:	f015 0506 	ands.w	r5, r5, #6
 8005ea0:	d106      	bne.n	8005eb0 <_printf_common+0x48>
 8005ea2:	f104 0a19 	add.w	sl, r4, #25
 8005ea6:	68e3      	ldr	r3, [r4, #12]
 8005ea8:	6832      	ldr	r2, [r6, #0]
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	42ab      	cmp	r3, r5
 8005eae:	dc28      	bgt.n	8005f02 <_printf_common+0x9a>
 8005eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eb4:	1e13      	subs	r3, r2, #0
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	bf18      	it	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	0692      	lsls	r2, r2, #26
 8005ebe:	d42d      	bmi.n	8005f1c <_printf_common+0xb4>
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec8:	47c0      	blx	r8
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d020      	beq.n	8005f10 <_printf_common+0xa8>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	68e5      	ldr	r5, [r4, #12]
 8005ed2:	f003 0306 	and.w	r3, r3, #6
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	bf18      	it	ne
 8005eda:	2500      	movne	r5, #0
 8005edc:	6832      	ldr	r2, [r6, #0]
 8005ede:	f04f 0600 	mov.w	r6, #0
 8005ee2:	68a3      	ldr	r3, [r4, #8]
 8005ee4:	bf08      	it	eq
 8005ee6:	1aad      	subeq	r5, r5, r2
 8005ee8:	6922      	ldr	r2, [r4, #16]
 8005eea:	bf08      	it	eq
 8005eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	bfc4      	itt	gt
 8005ef4:	1a9b      	subgt	r3, r3, r2
 8005ef6:	18ed      	addgt	r5, r5, r3
 8005ef8:	341a      	adds	r4, #26
 8005efa:	42b5      	cmp	r5, r6
 8005efc:	d11a      	bne.n	8005f34 <_printf_common+0xcc>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e008      	b.n	8005f14 <_printf_common+0xac>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4652      	mov	r2, sl
 8005f06:	4649      	mov	r1, r9
 8005f08:	4638      	mov	r0, r7
 8005f0a:	47c0      	blx	r8
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d103      	bne.n	8005f18 <_printf_common+0xb0>
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f18:	3501      	adds	r5, #1
 8005f1a:	e7c4      	b.n	8005ea6 <_printf_common+0x3e>
 8005f1c:	2030      	movs	r0, #48	; 0x30
 8005f1e:	18e1      	adds	r1, r4, r3
 8005f20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f2a:	4422      	add	r2, r4
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f32:	e7c5      	b.n	8005ec0 <_printf_common+0x58>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4622      	mov	r2, r4
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	47c0      	blx	r8
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d0e6      	beq.n	8005f10 <_printf_common+0xa8>
 8005f42:	3601      	adds	r6, #1
 8005f44:	e7d9      	b.n	8005efa <_printf_common+0x92>
	...

08005f48 <_printf_i>:
 8005f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	7e27      	ldrb	r7, [r4, #24]
 8005f50:	4691      	mov	r9, r2
 8005f52:	2f78      	cmp	r7, #120	; 0x78
 8005f54:	4680      	mov	r8, r0
 8005f56:	469a      	mov	sl, r3
 8005f58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f5e:	d807      	bhi.n	8005f70 <_printf_i+0x28>
 8005f60:	2f62      	cmp	r7, #98	; 0x62
 8005f62:	d80a      	bhi.n	8005f7a <_printf_i+0x32>
 8005f64:	2f00      	cmp	r7, #0
 8005f66:	f000 80d9 	beq.w	800611c <_printf_i+0x1d4>
 8005f6a:	2f58      	cmp	r7, #88	; 0x58
 8005f6c:	f000 80a4 	beq.w	80060b8 <_printf_i+0x170>
 8005f70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f78:	e03a      	b.n	8005ff0 <_printf_i+0xa8>
 8005f7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f7e:	2b15      	cmp	r3, #21
 8005f80:	d8f6      	bhi.n	8005f70 <_printf_i+0x28>
 8005f82:	a001      	add	r0, pc, #4	; (adr r0, 8005f88 <_printf_i+0x40>)
 8005f84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f88:	08005fe1 	.word	0x08005fe1
 8005f8c:	08005ff5 	.word	0x08005ff5
 8005f90:	08005f71 	.word	0x08005f71
 8005f94:	08005f71 	.word	0x08005f71
 8005f98:	08005f71 	.word	0x08005f71
 8005f9c:	08005f71 	.word	0x08005f71
 8005fa0:	08005ff5 	.word	0x08005ff5
 8005fa4:	08005f71 	.word	0x08005f71
 8005fa8:	08005f71 	.word	0x08005f71
 8005fac:	08005f71 	.word	0x08005f71
 8005fb0:	08005f71 	.word	0x08005f71
 8005fb4:	08006103 	.word	0x08006103
 8005fb8:	08006025 	.word	0x08006025
 8005fbc:	080060e5 	.word	0x080060e5
 8005fc0:	08005f71 	.word	0x08005f71
 8005fc4:	08005f71 	.word	0x08005f71
 8005fc8:	08006125 	.word	0x08006125
 8005fcc:	08005f71 	.word	0x08005f71
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08005f71 	.word	0x08005f71
 8005fd8:	08005f71 	.word	0x08005f71
 8005fdc:	080060ed 	.word	0x080060ed
 8005fe0:	680b      	ldr	r3, [r1, #0]
 8005fe2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fe6:	1d1a      	adds	r2, r3, #4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	600a      	str	r2, [r1, #0]
 8005fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0a4      	b.n	800613e <_printf_i+0x1f6>
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	6808      	ldr	r0, [r1, #0]
 8005ff8:	062e      	lsls	r6, r5, #24
 8005ffa:	f100 0304 	add.w	r3, r0, #4
 8005ffe:	d50a      	bpl.n	8006016 <_printf_i+0xce>
 8006000:	6805      	ldr	r5, [r0, #0]
 8006002:	600b      	str	r3, [r1, #0]
 8006004:	2d00      	cmp	r5, #0
 8006006:	da03      	bge.n	8006010 <_printf_i+0xc8>
 8006008:	232d      	movs	r3, #45	; 0x2d
 800600a:	426d      	negs	r5, r5
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006010:	230a      	movs	r3, #10
 8006012:	485e      	ldr	r0, [pc, #376]	; (800618c <_printf_i+0x244>)
 8006014:	e019      	b.n	800604a <_printf_i+0x102>
 8006016:	f015 0f40 	tst.w	r5, #64	; 0x40
 800601a:	6805      	ldr	r5, [r0, #0]
 800601c:	600b      	str	r3, [r1, #0]
 800601e:	bf18      	it	ne
 8006020:	b22d      	sxthne	r5, r5
 8006022:	e7ef      	b.n	8006004 <_printf_i+0xbc>
 8006024:	680b      	ldr	r3, [r1, #0]
 8006026:	6825      	ldr	r5, [r4, #0]
 8006028:	1d18      	adds	r0, r3, #4
 800602a:	6008      	str	r0, [r1, #0]
 800602c:	0628      	lsls	r0, r5, #24
 800602e:	d501      	bpl.n	8006034 <_printf_i+0xec>
 8006030:	681d      	ldr	r5, [r3, #0]
 8006032:	e002      	b.n	800603a <_printf_i+0xf2>
 8006034:	0669      	lsls	r1, r5, #25
 8006036:	d5fb      	bpl.n	8006030 <_printf_i+0xe8>
 8006038:	881d      	ldrh	r5, [r3, #0]
 800603a:	2f6f      	cmp	r7, #111	; 0x6f
 800603c:	bf0c      	ite	eq
 800603e:	2308      	moveq	r3, #8
 8006040:	230a      	movne	r3, #10
 8006042:	4852      	ldr	r0, [pc, #328]	; (800618c <_printf_i+0x244>)
 8006044:	2100      	movs	r1, #0
 8006046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800604a:	6866      	ldr	r6, [r4, #4]
 800604c:	2e00      	cmp	r6, #0
 800604e:	bfa8      	it	ge
 8006050:	6821      	ldrge	r1, [r4, #0]
 8006052:	60a6      	str	r6, [r4, #8]
 8006054:	bfa4      	itt	ge
 8006056:	f021 0104 	bicge.w	r1, r1, #4
 800605a:	6021      	strge	r1, [r4, #0]
 800605c:	b90d      	cbnz	r5, 8006062 <_printf_i+0x11a>
 800605e:	2e00      	cmp	r6, #0
 8006060:	d04d      	beq.n	80060fe <_printf_i+0x1b6>
 8006062:	4616      	mov	r6, r2
 8006064:	fbb5 f1f3 	udiv	r1, r5, r3
 8006068:	fb03 5711 	mls	r7, r3, r1, r5
 800606c:	5dc7      	ldrb	r7, [r0, r7]
 800606e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006072:	462f      	mov	r7, r5
 8006074:	42bb      	cmp	r3, r7
 8006076:	460d      	mov	r5, r1
 8006078:	d9f4      	bls.n	8006064 <_printf_i+0x11c>
 800607a:	2b08      	cmp	r3, #8
 800607c:	d10b      	bne.n	8006096 <_printf_i+0x14e>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	07df      	lsls	r7, r3, #31
 8006082:	d508      	bpl.n	8006096 <_printf_i+0x14e>
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	6861      	ldr	r1, [r4, #4]
 8006088:	4299      	cmp	r1, r3
 800608a:	bfde      	ittt	le
 800608c:	2330      	movle	r3, #48	; 0x30
 800608e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006092:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006096:	1b92      	subs	r2, r2, r6
 8006098:	6122      	str	r2, [r4, #16]
 800609a:	464b      	mov	r3, r9
 800609c:	4621      	mov	r1, r4
 800609e:	4640      	mov	r0, r8
 80060a0:	f8cd a000 	str.w	sl, [sp]
 80060a4:	aa03      	add	r2, sp, #12
 80060a6:	f7ff fedf 	bl	8005e68 <_printf_common>
 80060aa:	3001      	adds	r0, #1
 80060ac:	d14c      	bne.n	8006148 <_printf_i+0x200>
 80060ae:	f04f 30ff 	mov.w	r0, #4294967295
 80060b2:	b004      	add	sp, #16
 80060b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b8:	4834      	ldr	r0, [pc, #208]	; (800618c <_printf_i+0x244>)
 80060ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060be:	680e      	ldr	r6, [r1, #0]
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80060c6:	061f      	lsls	r7, r3, #24
 80060c8:	600e      	str	r6, [r1, #0]
 80060ca:	d514      	bpl.n	80060f6 <_printf_i+0x1ae>
 80060cc:	07d9      	lsls	r1, r3, #31
 80060ce:	bf44      	itt	mi
 80060d0:	f043 0320 	orrmi.w	r3, r3, #32
 80060d4:	6023      	strmi	r3, [r4, #0]
 80060d6:	b91d      	cbnz	r5, 80060e0 <_printf_i+0x198>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	f023 0320 	bic.w	r3, r3, #32
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	2310      	movs	r3, #16
 80060e2:	e7af      	b.n	8006044 <_printf_i+0xfc>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	f043 0320 	orr.w	r3, r3, #32
 80060ea:	6023      	str	r3, [r4, #0]
 80060ec:	2378      	movs	r3, #120	; 0x78
 80060ee:	4828      	ldr	r0, [pc, #160]	; (8006190 <_printf_i+0x248>)
 80060f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060f4:	e7e3      	b.n	80060be <_printf_i+0x176>
 80060f6:	065e      	lsls	r6, r3, #25
 80060f8:	bf48      	it	mi
 80060fa:	b2ad      	uxthmi	r5, r5
 80060fc:	e7e6      	b.n	80060cc <_printf_i+0x184>
 80060fe:	4616      	mov	r6, r2
 8006100:	e7bb      	b.n	800607a <_printf_i+0x132>
 8006102:	680b      	ldr	r3, [r1, #0]
 8006104:	6826      	ldr	r6, [r4, #0]
 8006106:	1d1d      	adds	r5, r3, #4
 8006108:	6960      	ldr	r0, [r4, #20]
 800610a:	600d      	str	r5, [r1, #0]
 800610c:	0635      	lsls	r5, r6, #24
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	d501      	bpl.n	8006116 <_printf_i+0x1ce>
 8006112:	6018      	str	r0, [r3, #0]
 8006114:	e002      	b.n	800611c <_printf_i+0x1d4>
 8006116:	0671      	lsls	r1, r6, #25
 8006118:	d5fb      	bpl.n	8006112 <_printf_i+0x1ca>
 800611a:	8018      	strh	r0, [r3, #0]
 800611c:	2300      	movs	r3, #0
 800611e:	4616      	mov	r6, r2
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	e7ba      	b.n	800609a <_printf_i+0x152>
 8006124:	680b      	ldr	r3, [r1, #0]
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	600a      	str	r2, [r1, #0]
 800612a:	681e      	ldr	r6, [r3, #0]
 800612c:	2100      	movs	r1, #0
 800612e:	4630      	mov	r0, r6
 8006130:	6862      	ldr	r2, [r4, #4]
 8006132:	f000 f82f 	bl	8006194 <memchr>
 8006136:	b108      	cbz	r0, 800613c <_printf_i+0x1f4>
 8006138:	1b80      	subs	r0, r0, r6
 800613a:	6060      	str	r0, [r4, #4]
 800613c:	6863      	ldr	r3, [r4, #4]
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	2300      	movs	r3, #0
 8006142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006146:	e7a8      	b.n	800609a <_printf_i+0x152>
 8006148:	4632      	mov	r2, r6
 800614a:	4649      	mov	r1, r9
 800614c:	4640      	mov	r0, r8
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	47d0      	blx	sl
 8006152:	3001      	adds	r0, #1
 8006154:	d0ab      	beq.n	80060ae <_printf_i+0x166>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	079b      	lsls	r3, r3, #30
 800615a:	d413      	bmi.n	8006184 <_printf_i+0x23c>
 800615c:	68e0      	ldr	r0, [r4, #12]
 800615e:	9b03      	ldr	r3, [sp, #12]
 8006160:	4298      	cmp	r0, r3
 8006162:	bfb8      	it	lt
 8006164:	4618      	movlt	r0, r3
 8006166:	e7a4      	b.n	80060b2 <_printf_i+0x16a>
 8006168:	2301      	movs	r3, #1
 800616a:	4632      	mov	r2, r6
 800616c:	4649      	mov	r1, r9
 800616e:	4640      	mov	r0, r8
 8006170:	47d0      	blx	sl
 8006172:	3001      	adds	r0, #1
 8006174:	d09b      	beq.n	80060ae <_printf_i+0x166>
 8006176:	3501      	adds	r5, #1
 8006178:	68e3      	ldr	r3, [r4, #12]
 800617a:	9903      	ldr	r1, [sp, #12]
 800617c:	1a5b      	subs	r3, r3, r1
 800617e:	42ab      	cmp	r3, r5
 8006180:	dcf2      	bgt.n	8006168 <_printf_i+0x220>
 8006182:	e7eb      	b.n	800615c <_printf_i+0x214>
 8006184:	2500      	movs	r5, #0
 8006186:	f104 0619 	add.w	r6, r4, #25
 800618a:	e7f5      	b.n	8006178 <_printf_i+0x230>
 800618c:	0800648f 	.word	0x0800648f
 8006190:	080064a0 	.word	0x080064a0

08006194 <memchr>:
 8006194:	4603      	mov	r3, r0
 8006196:	b510      	push	{r4, lr}
 8006198:	b2c9      	uxtb	r1, r1
 800619a:	4402      	add	r2, r0
 800619c:	4293      	cmp	r3, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	d101      	bne.n	80061a6 <memchr+0x12>
 80061a2:	2000      	movs	r0, #0
 80061a4:	e003      	b.n	80061ae <memchr+0x1a>
 80061a6:	7804      	ldrb	r4, [r0, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	428c      	cmp	r4, r1
 80061ac:	d1f6      	bne.n	800619c <memchr+0x8>
 80061ae:	bd10      	pop	{r4, pc}

080061b0 <memcpy>:
 80061b0:	440a      	add	r2, r1
 80061b2:	4291      	cmp	r1, r2
 80061b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80061b8:	d100      	bne.n	80061bc <memcpy+0xc>
 80061ba:	4770      	bx	lr
 80061bc:	b510      	push	{r4, lr}
 80061be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061c2:	4291      	cmp	r1, r2
 80061c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061c8:	d1f9      	bne.n	80061be <memcpy+0xe>
 80061ca:	bd10      	pop	{r4, pc}

080061cc <memmove>:
 80061cc:	4288      	cmp	r0, r1
 80061ce:	b510      	push	{r4, lr}
 80061d0:	eb01 0402 	add.w	r4, r1, r2
 80061d4:	d902      	bls.n	80061dc <memmove+0x10>
 80061d6:	4284      	cmp	r4, r0
 80061d8:	4623      	mov	r3, r4
 80061da:	d807      	bhi.n	80061ec <memmove+0x20>
 80061dc:	1e43      	subs	r3, r0, #1
 80061de:	42a1      	cmp	r1, r4
 80061e0:	d008      	beq.n	80061f4 <memmove+0x28>
 80061e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ea:	e7f8      	b.n	80061de <memmove+0x12>
 80061ec:	4601      	mov	r1, r0
 80061ee:	4402      	add	r2, r0
 80061f0:	428a      	cmp	r2, r1
 80061f2:	d100      	bne.n	80061f6 <memmove+0x2a>
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061fe:	e7f7      	b.n	80061f0 <memmove+0x24>

08006200 <_free_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4605      	mov	r5, r0
 8006204:	2900      	cmp	r1, #0
 8006206:	d043      	beq.n	8006290 <_free_r+0x90>
 8006208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800620c:	1f0c      	subs	r4, r1, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	bfb8      	it	lt
 8006212:	18e4      	addlt	r4, r4, r3
 8006214:	f000 f8d0 	bl	80063b8 <__malloc_lock>
 8006218:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <_free_r+0x94>)
 800621a:	6813      	ldr	r3, [r2, #0]
 800621c:	4610      	mov	r0, r2
 800621e:	b933      	cbnz	r3, 800622e <_free_r+0x2e>
 8006220:	6063      	str	r3, [r4, #4]
 8006222:	6014      	str	r4, [r2, #0]
 8006224:	4628      	mov	r0, r5
 8006226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800622a:	f000 b8cb 	b.w	80063c4 <__malloc_unlock>
 800622e:	42a3      	cmp	r3, r4
 8006230:	d90a      	bls.n	8006248 <_free_r+0x48>
 8006232:	6821      	ldr	r1, [r4, #0]
 8006234:	1862      	adds	r2, r4, r1
 8006236:	4293      	cmp	r3, r2
 8006238:	bf01      	itttt	eq
 800623a:	681a      	ldreq	r2, [r3, #0]
 800623c:	685b      	ldreq	r3, [r3, #4]
 800623e:	1852      	addeq	r2, r2, r1
 8006240:	6022      	streq	r2, [r4, #0]
 8006242:	6063      	str	r3, [r4, #4]
 8006244:	6004      	str	r4, [r0, #0]
 8006246:	e7ed      	b.n	8006224 <_free_r+0x24>
 8006248:	461a      	mov	r2, r3
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	b10b      	cbz	r3, 8006252 <_free_r+0x52>
 800624e:	42a3      	cmp	r3, r4
 8006250:	d9fa      	bls.n	8006248 <_free_r+0x48>
 8006252:	6811      	ldr	r1, [r2, #0]
 8006254:	1850      	adds	r0, r2, r1
 8006256:	42a0      	cmp	r0, r4
 8006258:	d10b      	bne.n	8006272 <_free_r+0x72>
 800625a:	6820      	ldr	r0, [r4, #0]
 800625c:	4401      	add	r1, r0
 800625e:	1850      	adds	r0, r2, r1
 8006260:	4283      	cmp	r3, r0
 8006262:	6011      	str	r1, [r2, #0]
 8006264:	d1de      	bne.n	8006224 <_free_r+0x24>
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4401      	add	r1, r0
 800626c:	6011      	str	r1, [r2, #0]
 800626e:	6053      	str	r3, [r2, #4]
 8006270:	e7d8      	b.n	8006224 <_free_r+0x24>
 8006272:	d902      	bls.n	800627a <_free_r+0x7a>
 8006274:	230c      	movs	r3, #12
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	e7d4      	b.n	8006224 <_free_r+0x24>
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	1821      	adds	r1, r4, r0
 800627e:	428b      	cmp	r3, r1
 8006280:	bf01      	itttt	eq
 8006282:	6819      	ldreq	r1, [r3, #0]
 8006284:	685b      	ldreq	r3, [r3, #4]
 8006286:	1809      	addeq	r1, r1, r0
 8006288:	6021      	streq	r1, [r4, #0]
 800628a:	6063      	str	r3, [r4, #4]
 800628c:	6054      	str	r4, [r2, #4]
 800628e:	e7c9      	b.n	8006224 <_free_r+0x24>
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	bf00      	nop
 8006294:	200003f0 	.word	0x200003f0

08006298 <_malloc_r>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	1ccd      	adds	r5, r1, #3
 800629c:	f025 0503 	bic.w	r5, r5, #3
 80062a0:	3508      	adds	r5, #8
 80062a2:	2d0c      	cmp	r5, #12
 80062a4:	bf38      	it	cc
 80062a6:	250c      	movcc	r5, #12
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	4606      	mov	r6, r0
 80062ac:	db01      	blt.n	80062b2 <_malloc_r+0x1a>
 80062ae:	42a9      	cmp	r1, r5
 80062b0:	d903      	bls.n	80062ba <_malloc_r+0x22>
 80062b2:	230c      	movs	r3, #12
 80062b4:	6033      	str	r3, [r6, #0]
 80062b6:	2000      	movs	r0, #0
 80062b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ba:	f000 f87d 	bl	80063b8 <__malloc_lock>
 80062be:	4921      	ldr	r1, [pc, #132]	; (8006344 <_malloc_r+0xac>)
 80062c0:	680a      	ldr	r2, [r1, #0]
 80062c2:	4614      	mov	r4, r2
 80062c4:	b99c      	cbnz	r4, 80062ee <_malloc_r+0x56>
 80062c6:	4f20      	ldr	r7, [pc, #128]	; (8006348 <_malloc_r+0xb0>)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	b923      	cbnz	r3, 80062d6 <_malloc_r+0x3e>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4630      	mov	r0, r6
 80062d0:	f000 f862 	bl	8006398 <_sbrk_r>
 80062d4:	6038      	str	r0, [r7, #0]
 80062d6:	4629      	mov	r1, r5
 80062d8:	4630      	mov	r0, r6
 80062da:	f000 f85d 	bl	8006398 <_sbrk_r>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d123      	bne.n	800632a <_malloc_r+0x92>
 80062e2:	230c      	movs	r3, #12
 80062e4:	4630      	mov	r0, r6
 80062e6:	6033      	str	r3, [r6, #0]
 80062e8:	f000 f86c 	bl	80063c4 <__malloc_unlock>
 80062ec:	e7e3      	b.n	80062b6 <_malloc_r+0x1e>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	1b5b      	subs	r3, r3, r5
 80062f2:	d417      	bmi.n	8006324 <_malloc_r+0x8c>
 80062f4:	2b0b      	cmp	r3, #11
 80062f6:	d903      	bls.n	8006300 <_malloc_r+0x68>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	441c      	add	r4, r3
 80062fc:	6025      	str	r5, [r4, #0]
 80062fe:	e004      	b.n	800630a <_malloc_r+0x72>
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	42a2      	cmp	r2, r4
 8006304:	bf0c      	ite	eq
 8006306:	600b      	streq	r3, [r1, #0]
 8006308:	6053      	strne	r3, [r2, #4]
 800630a:	4630      	mov	r0, r6
 800630c:	f000 f85a 	bl	80063c4 <__malloc_unlock>
 8006310:	f104 000b 	add.w	r0, r4, #11
 8006314:	1d23      	adds	r3, r4, #4
 8006316:	f020 0007 	bic.w	r0, r0, #7
 800631a:	1ac2      	subs	r2, r0, r3
 800631c:	d0cc      	beq.n	80062b8 <_malloc_r+0x20>
 800631e:	1a1b      	subs	r3, r3, r0
 8006320:	50a3      	str	r3, [r4, r2]
 8006322:	e7c9      	b.n	80062b8 <_malloc_r+0x20>
 8006324:	4622      	mov	r2, r4
 8006326:	6864      	ldr	r4, [r4, #4]
 8006328:	e7cc      	b.n	80062c4 <_malloc_r+0x2c>
 800632a:	1cc4      	adds	r4, r0, #3
 800632c:	f024 0403 	bic.w	r4, r4, #3
 8006330:	42a0      	cmp	r0, r4
 8006332:	d0e3      	beq.n	80062fc <_malloc_r+0x64>
 8006334:	1a21      	subs	r1, r4, r0
 8006336:	4630      	mov	r0, r6
 8006338:	f000 f82e 	bl	8006398 <_sbrk_r>
 800633c:	3001      	adds	r0, #1
 800633e:	d1dd      	bne.n	80062fc <_malloc_r+0x64>
 8006340:	e7cf      	b.n	80062e2 <_malloc_r+0x4a>
 8006342:	bf00      	nop
 8006344:	200003f0 	.word	0x200003f0
 8006348:	200003f4 	.word	0x200003f4

0800634c <_realloc_r>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	4607      	mov	r7, r0
 8006350:	4614      	mov	r4, r2
 8006352:	460e      	mov	r6, r1
 8006354:	b921      	cbnz	r1, 8006360 <_realloc_r+0x14>
 8006356:	4611      	mov	r1, r2
 8006358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800635c:	f7ff bf9c 	b.w	8006298 <_malloc_r>
 8006360:	b922      	cbnz	r2, 800636c <_realloc_r+0x20>
 8006362:	f7ff ff4d 	bl	8006200 <_free_r>
 8006366:	4625      	mov	r5, r4
 8006368:	4628      	mov	r0, r5
 800636a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800636c:	f000 f830 	bl	80063d0 <_malloc_usable_size_r>
 8006370:	42a0      	cmp	r0, r4
 8006372:	d20f      	bcs.n	8006394 <_realloc_r+0x48>
 8006374:	4621      	mov	r1, r4
 8006376:	4638      	mov	r0, r7
 8006378:	f7ff ff8e 	bl	8006298 <_malloc_r>
 800637c:	4605      	mov	r5, r0
 800637e:	2800      	cmp	r0, #0
 8006380:	d0f2      	beq.n	8006368 <_realloc_r+0x1c>
 8006382:	4631      	mov	r1, r6
 8006384:	4622      	mov	r2, r4
 8006386:	f7ff ff13 	bl	80061b0 <memcpy>
 800638a:	4631      	mov	r1, r6
 800638c:	4638      	mov	r0, r7
 800638e:	f7ff ff37 	bl	8006200 <_free_r>
 8006392:	e7e9      	b.n	8006368 <_realloc_r+0x1c>
 8006394:	4635      	mov	r5, r6
 8006396:	e7e7      	b.n	8006368 <_realloc_r+0x1c>

08006398 <_sbrk_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	2300      	movs	r3, #0
 800639c:	4d05      	ldr	r5, [pc, #20]	; (80063b4 <_sbrk_r+0x1c>)
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	f7fb fa54 	bl	8001850 <_sbrk>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_sbrk_r+0x1a>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_sbrk_r+0x1a>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	200004e0 	.word	0x200004e0

080063b8 <__malloc_lock>:
 80063b8:	4801      	ldr	r0, [pc, #4]	; (80063c0 <__malloc_lock+0x8>)
 80063ba:	f000 b811 	b.w	80063e0 <__retarget_lock_acquire_recursive>
 80063be:	bf00      	nop
 80063c0:	200004e8 	.word	0x200004e8

080063c4 <__malloc_unlock>:
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <__malloc_unlock+0x8>)
 80063c6:	f000 b80c 	b.w	80063e2 <__retarget_lock_release_recursive>
 80063ca:	bf00      	nop
 80063cc:	200004e8 	.word	0x200004e8

080063d0 <_malloc_usable_size_r>:
 80063d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d4:	1f18      	subs	r0, r3, #4
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfbc      	itt	lt
 80063da:	580b      	ldrlt	r3, [r1, r0]
 80063dc:	18c0      	addlt	r0, r0, r3
 80063de:	4770      	bx	lr

080063e0 <__retarget_lock_acquire_recursive>:
 80063e0:	4770      	bx	lr

080063e2 <__retarget_lock_release_recursive>:
 80063e2:	4770      	bx	lr

080063e4 <_init>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr

080063f0 <_fini>:
 80063f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f2:	bf00      	nop
 80063f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f6:	bc08      	pop	{r3}
 80063f8:	469e      	mov	lr, r3
 80063fa:	4770      	bx	lr
